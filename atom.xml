<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://zhongriqian.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhongriqian.github.io/"/>
  <updated>2023-02-20T11:14:51.043Z</updated>
  <id>http://zhongriqian.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多网卡主机Docker网络配置问题</title>
    <link href="http://zhongriqian.github.io/2023/02/20/%E5%A4%9A%E7%BD%91%E5%8D%A1%E4%B8%BB%E6%9C%BADocker%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://zhongriqian.github.io/2023/02/20/%E5%A4%9A%E7%BD%91%E5%8D%A1%E4%B8%BB%E6%9C%BADocker%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-02-20T11:14:51.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主机环境">主机环境</h2><img src="/.io//image-20230220152416545.png" style="zoom:50%;"><blockquote><p><strong>两个网卡：一个IP为169.254.140.68、一个IP为192.168.31.154</strong></p></blockquote><h2 id="测试环境">测试环境</h2><blockquote><p>使用一台树莓派和一台PC完成测试，两台设备接入同一WiFi，然后再将两设备用网线直连。两设备可以通过WLAN通信，也可以通网线连接的LAN通信。WLAN的网段为192.168.31.0/24，LAN的网段为169.254.0.0/16。PC在WLAN下的IP为192.168.31.69，在LAN下的IP为169.254.140.66。<br>在树莓派上部署容器（容器为PLC运行环境容器），然后在不同的docker网络配置下，测试PC与容器的通信，包括PC上的PLC开发环境软件是否能接入容器，以及从容器内部是否能ping通PC。</p></blockquote><h2 id="host模式">host模式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --net=host 0375866a09cd</span><br></pre></td></tr></table></figure><blockquote><p><strong>IDE从两个网卡IP都可以接入RTE</strong></p></blockquote><img src="/.io//image-20230220163450786.png" alt="image-20230220163450786" style="zoom:50%;"><img src="/.io//image-20230220163536281.png" alt="image-20230220163536281" style="zoom:50%;"><blockquote><p><strong>在容器内ping两个网段内的其他设备也都可以ping通</strong></p></blockquote><img src="/.io//image-20230220163619373.png" alt="image-20230220163619373" style="zoom:50%;"><h2 id="bridge模式（不绑定网卡）">bridge模式（不绑定网卡）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --net=bridge -p 3000:3000 0375866a09cd</span><br></pre></td></tr></table></figure><blockquote><p><strong>IDE从两个网卡IP都可以接入RTE</strong></p></blockquote><blockquote><p><strong>在容器内ping两个网段内的其他设备也都可以ping通</strong></p></blockquote><img src="/.io//image-20230220170901276.png" alt="image-20230220170901276" style="zoom: 50%;"><blockquote><p><strong>ping 169.254.0.0/16网段内设备，源IP为169.254.140.68；ping 192.168.31.0/24网段内设备，源IP为192.168.31.154</strong></p></blockquote><img src="/.io//image-20230220171011326.png" alt="image-20230220171011326" style="zoom: 50%;"><img src="/.io//image-20230220171055733.png" alt="image-20230220171055733" style="zoom:50%;"><h2 id="bridge模式（绑定网卡）">bridge模式（绑定网卡）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建网络（此处新建的网络本质也是bridge模式）</span><br><span class="line">docker network create --dirver bridge --subnet 172.18.0.0/16 docker1</span><br><span class="line"></span><br><span class="line"># 容器绑定网卡IP</span><br><span class="line">docker run -it --net docker1  -p 192.168.31.154:3000:3000 0375866a09cd</span><br></pre></td></tr></table></figure><blockquote><p><strong>IDE只能从192.168.31.154接入RTE</strong></p></blockquote><blockquote><p><strong>没配置nat情况下，从容器内部ping容器绑定IP的同网段（192.168.31.0/24）设备时，ping不通</strong></p></blockquote><img src="/.io//image-20230220175537270.png" alt="image-20230220175537270" style="zoom:50%;"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 配置nat，容器向外发送的数据包源IP转换成192.168.31.154</span><br><span class="line">iptables -t nat -I POSTROUTING -p all -s 172.18.0.0/16 -j SNAT --to-source 192.168.31.154</span><br><span class="line"></span><br><span class="line"># 其他iptables命令</span><br><span class="line"># 查看nat规则</span><br><span class="line">iptables -t nat -nvL --line-numbers</span><br><span class="line"># 删除nat规则</span><br><span class="line">iptables -t nat -D ‘nat chain名称’ ‘规则序号’</span><br><span class="line">iptables -t nat -D POSTROUTING 1</span><br></pre></td></tr></table></figure><blockquote><p><strong>配置后，可以ping通</strong></p></blockquote><img src="/.io//image-20230220175642667.png" alt="image-20230220175642667" style="zoom:50%;"><blockquote><p><strong>从容器内ping另一网段（169.254.0.0/16）设备时，ping不通</strong><br><strong>但也可以删除上面的nat配置，然后重配置nat，使其能ping通169.254.0.0/16网段设备</strong></p></blockquote><ul><li><strong>总结</strong><ul><li><strong>入向（网络内其他设备到容器）：创建容器时通过参数绑定某一网卡后，网络内其他设备只能通过容器绑定的网卡IP访问容器</strong></li><li><strong>出向（容器到网络内其他设备）：配置nat，将容器IP转换为网卡IP，从而使容器能够访问网卡IP所在网段内的其他设备</strong></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;主机环境&quot;&gt;主机环境&lt;/h2&gt;
&lt;img src=&quot;/.io//image-20230220152416545.png&quot; style=&quot;zoom:50%;&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;两个网卡：一个IP为169.254.140.68、一个I</summary>
      
    
    
    
    <category term="Docker" scheme="http://zhongriqian.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://zhongriqian.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Socket网络编程</title>
    <link href="http://zhongriqian.github.io/2023/02/08/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://zhongriqian.github.io/2023/02/08/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2023-02-07T16:00:00.000Z</published>
    <updated>2023-02-08T06:23:00.065Z</updated>
    
    <content type="html"><![CDATA[<h1>结构体</h1><blockquote><p><strong>各类结构体以不同方式存放不同类型、不同数量的Socket信息，作为不同Socket接口函数的输入参数使用</strong></p></blockquote><h2 id="in-addr">in_addr</h2><blockquote><p><strong>表示32位的IPv4地址</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于表示32位的IPv4地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span></span><br><span class="line">    <span class="type">in_addr_t</span> s_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int_addr_t类型为unsigned int，长度为4字节（32位），字节序为网络顺序（大端字节序）</span></span><br><span class="line"><span class="comment">// 如IP地址192.168.3.144，用int_addr_t类型存储为0Xc0a80390</span></span><br></pre></td></tr></table></figure><h2 id="sockaddr">sockaddr</h2><blockquote><p><strong>套接字结构</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>&#123;</span></span><br><span class="line"><span class="type">sa_family_t</span> sin_family;<span class="comment">// 协议族</span></span><br><span class="line">    <span class="type">char</span> sa_data[<span class="number">14</span>]; <span class="comment">// 套接字中的目标IP和端口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sa_family_t类型为unsigned short，长度为2字节（16位）</span></span><br><span class="line"><span class="comment">// 取值包括：AF_INET、AF_INET6、AF_UNSPE</span></span><br></pre></td></tr></table></figure><h2 id="sockaddr-in">sockaddr_in</h2><blockquote><p><strong>套接字结构</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span>     sin_family;   <span class="comment">// 协议族</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span>  sin_port;     <span class="comment">// 端口号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>  <span class="title">sin_addr</span>;</span>     <span class="comment">// IP地址结构体</span></span><br><span class="line">    <span class="type">char</span>            sin_zero[<span class="number">8</span>];  <span class="comment">// 填充，为了与sockaddr结构体在内存中对齐，方便相互转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>函数</h1><h2 id="字节序转换">字节序转换</h2><blockquote><p><strong>字节序指在内存中存放大于一个字节的数据时，数据各字节的存放顺序。</strong><br><strong>字节序可分为：</strong><br>大端字节序：高位字节在前，低位字节在后<br>小端字节序：低位字节在前，高位字节在后</p></blockquote><blockquote><p><strong>设计两种字节序的原因：</strong><br>大端字节序符合人类的读写习惯，比如我们想存放“一千二百三十四”这个十进制数字（转换为十六进制为0x04D2），用大端字节序存储后，当我们读取时还是0x04D2。<br>但如果用小端字节序存储，读取时就变为0xD204。虽然小端字节序不符合人类读写习惯，但有利于提高计算效率，因为计算机计算时都是从数据的低位开始计算。</p></blockquote><blockquote><p><strong>主机字节序：小端字节序</strong><br><strong>网络字节序：大端字节序</strong></p></blockquote><h3 id="普通数据的字节序转换">普通数据的字节序转换</h3><h4 id="主机字节序—-网络字节序">主机字节序—&gt;网络字节序</h4><blockquote><p>功能：无符号32位/16位整型数据转换<br>参数：主机字节序数据<br>返回值：网络字节序数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;</span><br></pre></td></tr></table></figure><h4 id="网络字节序—-主机字节序">网络字节序—&gt;主机字节序</h4><blockquote><p>功能：无符号32位/16位整型数据转换<br>参数：网络字节序数据<br>返回值：主机字节序数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;</span><br></pre></td></tr></table></figure><h3 id="IP地址的字节序转换">IP地址的字节序转换</h3><h4 id="字符串—-网络字节序">字符串—&gt;网络字节序</h4><h5 id="inet-pton">inet_pton</h5><blockquote><p>参数af：地址协议族（AF_INET、AF_INET6）<br>参数strptr：指向IP字符串存储地址的指针<br>参数addrptr：指向网络字节序IP数据存储地址的指针<br>返回值：成功返回1，输入的IP地址无效返回0，出错返回-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">inet_pton</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">char</span> *strptr, <span class="type">void</span> *addrptr)</span>;</span><br></pre></td></tr></table></figure><h5 id="inet-aton">inet_aton</h5><blockquote><p>参数cp：指向IP字符串存储地址的指针<br>参数inp：指向in_addr结构体的指针，结构体内s_addr存储转换后的格式为网络字节序的32位二进制格式的IP<br>返回值：成功返回非0，IP地址无效返回0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">inet_aton</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp, <span class="keyword">struct</span> in_addr *inp)</span>;</span><br></pre></td></tr></table></figure><h5 id="inet-addr">inet_addr</h5><blockquote><p>参数cp：指向IP字符串存储地址的指针<br>返回值：in_addr_t类型变量，存储网络字节序的32位二进制格式的IP</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_addr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串—-主机字节序">字符串—&gt;主机字节序</h4><h5 id="inet-network">inet_network</h5><blockquote><p>参数cp：指向IP字符串存储地址的指针<br>返回值：in_addr_t类型变量，存储主机字节序的32位二进制格式的IP</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_network</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span>;</span><br></pre></td></tr></table></figure><h4 id="网络字节序—-字符串">网络字节序—&gt;字符串</h4><h5 id="inet-ntop">inet_ntop</h5><blockquote><p>参数af：地址协议族<br>参数addrptr：指向网络字节序IP数据存储地址的指针<br>参数strptr：指向IP字符串存储地址的指针<br>参数len：IP字符串存储地址空间大小<br>返回值：成功返回参数strptr的指针，失败返回NULL且修改errno的值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">inet_ntop</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">void</span> *addrptr, <span class="type">char</span> *strptr, <span class="type">size_t</span> len)</span>;</span><br></pre></td></tr></table></figure><h5 id="inet-ntoa">inet_ntoa</h5><blockquote><p>参数in：in_addr结构体，结构体内s_addr存储网络字节序的32位二进制格式的IP<br>返回值：指向IP字符串存储地址的指针</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br></pre></td></tr></table></figure><h4 id="测试">测试</h4><blockquote><p><strong>测试inet_pton、inet_ntop</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 测试inet_pton</span></span><br><span class="line"><span class="type">char</span> ip_str[] =<span class="string">&quot;193.168.1.10&quot;</span>;</span><br><span class="line"><span class="type">in_addr_t</span> ip_addr;</span><br><span class="line"><span class="type">int</span> re = inet_pton(AF_INET, ip_str, (<span class="type">void</span> *)&amp;ip_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_pton返回值 = %d\n&quot;</span>,re);</span><br><span class="line"><span class="comment">// inet_pton返回值 = 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ip_addr = %d\n&quot;</span>,ip_addr);</span><br><span class="line"><span class="comment">// ip_addr = 167880897</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line"><span class="comment">// 测试inet_ntop</span></span><br><span class="line"><span class="type">char</span> ip_str2[INET_ADDRSTRLEN];</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *re2 = inet_ntop(AF_INET, (<span class="type">const</span> <span class="type">void</span> *)&amp;ip_addr, ip_str2, <span class="keyword">sizeof</span>(ip_str2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_ntop返回值 = %s\n&quot;</span>, re2);</span><br><span class="line"><span class="comment">// inet_ntop返回值 = 193.168.1.10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ip_str2 = %s\n&quot;</span>,ip_str2);</span><br><span class="line"><span class="comment">// ip_str2 = 193.168.1.10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>测试inet_aton、inet_ntoa</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 测试inet_aton</span></span><br><span class="line"><span class="type">char</span> ip_str[] =<span class="string">&quot;193.168.1.10&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr</span>;</span></span><br><span class="line"><span class="type">int</span> re = inet_aton(ip_str, &amp;ip_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_aton返回值 = %d\n&quot;</span>,re);</span><br><span class="line"><span class="comment">// inet_aton返回值 = 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ip_addr.s_addr = %d\n&quot;</span>,ip_addr.s_addr);</span><br><span class="line"><span class="comment">// ip_addr.s_addr = 167880897</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试inet_ntoa</span></span><br><span class="line"><span class="type">char</span> *ip_str2;</span><br><span class="line">ip_str2 = inet_ntoa(ip_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_ntoa返回值 = %s\n&quot;</span>, ip_str2);</span><br><span class="line"><span class="comment">// inet_ntoa返回值 = 193.168.1.10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>测试inet_addr、inet_network</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 测试inet_addr</span></span><br><span class="line"><span class="type">char</span> ip_str[] =<span class="string">&quot;193.168.1.10&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr1</span>;</span></span><br><span class="line">ip_addr1.s_addr = inet_addr(ip_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_addr返回值 = %u\n&quot;</span>,ip_addr1.s_addr);</span><br><span class="line"><span class="comment">// inet_addr返回值 = 167880897</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试inet_network</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr2</span>;</span></span><br><span class="line">ip_addr2.s_addr = inet_network(ip_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_network返回值 = %u\n&quot;</span>, ip_addr2.s_addr);</span><br><span class="line"><span class="comment">// inet_network返回值 = 3249013002</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IP地址处理">IP地址处理</h2><h3 id="IP地址—-主机地址">IP地址—&gt;主机地址</h3><blockquote><p>参数in：in_addr结构体<br>返回值：in_addr_t类型变量，存储主机字节序的主机地址数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_lnaof</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br></pre></td></tr></table></figure><h3 id="IP地址—-网络地址">IP地址—&gt;网络地址</h3><blockquote><p>参数in：in_addr结构体<br>返回值：in_addr_t类型变量，存储主机字节序的网络地址数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_netof</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br></pre></td></tr></table></figure><h3 id="主机地址-网络地址—-IP地址">主机地址+网络地址—&gt;IP地址</h3><blockquote><p>参数net：in_addr_t类型变量，存储网络字节序的网络地址数据<br>参数host：in_addr_t类型变量，存储网络字节序的主机地址数据<br>返回值：in_addr结构体，内部包含in_addr_t类型变量，存储网络主机字节序的IP地址数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> in_addr <span class="title function_">inet_makeaddr</span><span class="params">(<span class="type">in_addr_t</span> net, <span class="type">in_addr_t</span> host)</span>;</span><br></pre></td></tr></table></figure><h3 id="测试-2">测试</h3><blockquote><p><strong>测试inet_lnaof、inet_netof、inet_makeaddr</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> ip_str1[] = <span class="string">&quot;44.135.86.12&quot;</span>;</span><br><span class="line"><span class="type">char</span> ip_str2[] = <span class="string">&quot;172.16.23.95&quot;</span>;</span><br><span class="line"><span class="type">char</span> *ip_str;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *net_str1;</span><br><span class="line"><span class="type">char</span> *net_str2;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *host_str1;</span><br><span class="line"><span class="type">char</span> *host_str2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">net_addr1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">net_addr2</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">host_addr1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">host_addr2</span>;</span></span><br><span class="line"></span><br><span class="line">inet_aton(ip_str1,&amp;ip_addr1);              <span class="comment">// 将IP地址从字符串格式转为网络字节序的32位二进制格式</span></span><br><span class="line"></span><br><span class="line">host_addr1.s_addr = inet_lnaof(ip_addr1);     <span class="comment">// 将IP地址转换为主机地址，格式为主机字节序的32位二进制格式</span></span><br><span class="line">host_addr1.s_addr = htonl(host_addr1.s_addr); <span class="comment">// 主机字节序转换为网络字节序</span></span><br><span class="line">host_str1 = inet_ntoa(host_addr1);            <span class="comment">// 将主机地址从网络字节序的32位二进制格式转换为字符串格式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机地址：%s\n&quot;</span>,host_str1);</span><br><span class="line"></span><br><span class="line">net_addr1.s_addr = inet_netof(ip_addr1);      <span class="comment">// 将IP地址转换为网络地址，格式为主机字节序的32位二进制格式</span></span><br><span class="line">net_addr1.s_addr = htonl(net_addr1.s_addr);   <span class="comment">// 主机字节序转换为网络字节序</span></span><br><span class="line">net_str1 = inet_ntoa(net_addr1);              <span class="comment">// 将主机地址从网络字节序的32位二进制格式转换为字符串格式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络地址：%s\n&quot;</span>,net_str1);</span><br><span class="line"></span><br><span class="line">host_addr1.s_addr = ntohl(host_addr1.s_addr);  <span class="comment">// 网络字节序转换为主机字节序</span></span><br><span class="line">net_addr1.s_addr = ntohl(net_addr1.s_addr);    <span class="comment">// 网络字节序转换为主机字节序</span></span><br><span class="line">ip_addr = inet_makeaddr(net_addr1.s_addr, host_addr1.s_addr); <span class="comment">// 网络地址和主机地址合成IP地址，格式为网络字节序的32位二进制格式</span></span><br><span class="line">ip_str = inet_ntoa(ip_addr);                   <span class="comment">// 将IP地址从网络字节序的32位二进制格式转换为字符串格式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP地址：%s\n&quot;</span>,ip_str);</span><br><span class="line"></span><br><span class="line">inet_aton(ip_str2,&amp;ip_addr2);</span><br><span class="line"></span><br><span class="line">host_addr2.s_addr = inet_lnaof(ip_addr2);</span><br><span class="line">host_addr2.s_addr = htonl(host_addr2.s_addr);</span><br><span class="line">host_str2 = inet_ntoa(host_addr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机地址：%s\n&quot;</span>,host_str2);</span><br><span class="line"></span><br><span class="line">net_addr2.s_addr = inet_netof(ip_addr2);</span><br><span class="line">net_addr2.s_addr = htonl(net_addr2.s_addr);</span><br><span class="line">net_str2 = inet_ntoa(net_addr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络地址：%s\n&quot;</span>,net_str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常规SocketC">常规SocketC</h2><h3 id="TCP">TCP</h3><h4 id="服务端">服务端</h4><h4 id="客户端">客户端</h4><h3 id="UDP">UDP</h3><h4 id="服务端-2">服务端</h4><h4 id="客户端-2">客户端</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;结构体&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;各类结构体以不同方式存放不同类型、不同数量的Socket信息，作为不同Socket接口函数的输入参数使用&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;in-addr&quot;&gt;in_add</summary>
      
    
    
    
    <category term="Linux" scheme="http://zhongriqian.github.io/categories/Linux/"/>
    
    
    <category term="Socket" scheme="http://zhongriqian.github.io/tags/Socket/"/>
    
    <category term="Linux" scheme="http://zhongriqian.github.io/tags/Linux/"/>
    
    <category term="C" scheme="http://zhongriqian.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用网络命令</title>
    <link href="http://zhongriqian.github.io/2023/01/28/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhongriqian.github.io/2023/01/28/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</id>
    <published>2023-01-27T16:00:00.000Z</published>
    <updated>2023-02-16T07:24:14.176Z</updated>
    
    <content type="html"><![CDATA[<h1>ifconfig</h1><p><strong>功能</strong></p><blockquote><p>显示网络设备信息</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 显示某网卡信息</span><br><span class="line">ifconfig eth0</span><br><span class="line"></span><br><span class="line"># 配置网卡IP</span><br><span class="line">ifconfig ehx x.x.x.x netmask x.x.x.x</span><br><span class="line">ifconfig eh0 192.168.10.2 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><h1>ip</h1><p><strong>功能</strong></p><blockquote><p>显示网络设备信息</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示网卡设备信息</span><br><span class="line">ip a</span><br><span class="line"></span><br><span class="line"># 显示网卡设备链路层信息</span><br><span class="line">ip link</span><br><span class="line">ip -s link</span><br><span class="line"></span><br><span class="line"># 查看所在局域网内设备MAC地址</span><br><span class="line">ip neighbor</span><br></pre></td></tr></table></figure><h1>ping</h1><p><strong>功能</strong></p><blockquote><p>发送ICMP包，检测网络状态</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 检测到IP为192.168.137.16主机的网络</span><br><span class="line">ping 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定发送次数</span><br><span class="line">ping -c 10 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定发送时间间隔（单位s，缺省值1s）</span><br><span class="line">ping -i 10 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定持续发送时间（单位s）</span><br><span class="line">ping -w 10 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定发送数据包字节数（缺省64字节，其中ICMP包头8字节、负载56字节，最大65535字节）</span><br><span class="line">ping -s 1000 192.168.137.16</span><br></pre></td></tr></table></figure><h1>route</h1><p><strong>功能</strong></p><blockquote><p>显示和操作路由表</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 显示路由表</span><br><span class="line">route -nee</span><br><span class="line"></span><br><span class="line"># 添加主机路由</span><br><span class="line">route add -host 192.168.1.2 gw 172.16.0.1 dev eth0</span><br><span class="line"></span><br><span class="line"># 添加网络路由</span><br><span class="line">route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 dev eth0</span><br><span class="line">route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0</span><br><span class="line"></span><br><span class="line"># 添加默认路由</span><br><span class="line">route add -net 0.0.0.0 netmask 0.0.0.0 gw 172.16.0.1</span><br><span class="line">route add -net 0.0.0.0/0 gw 172.16.0.1</span><br><span class="line">route add default gw 172.16.0.1</span><br><span class="line"></span><br><span class="line"># 删除路由</span><br><span class="line">route add -host 192.168.1.2 gw 172.16.0.1 dev eth0</span><br></pre></td></tr></table></figure><h1>netstat</h1><p><strong>功能</strong></p><blockquote><p>查看网络状态、路由表、接口信息等</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有TCP协议相关信息，及其所属进程</span><br><span class="line">netstat -anpt</span><br><span class="line"></span><br><span class="line"># 显示所有UDP协议相关信息，及其所属进程</span><br><span class="line">netstat -anpu</span><br><span class="line"></span><br><span class="line"># 显示路由表</span><br><span class="line">netstat -r</span><br><span class="line"></span><br><span class="line"># 显示网卡信息</span><br><span class="line">netstat -i</span><br></pre></td></tr></table></figure><h1>ss</h1><p><strong>功能</strong></p><blockquote><p>获取socket信息</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有TCP协议相关信息，及其所属进程</span><br><span class="line">ss -apt</span><br><span class="line"></span><br><span class="line"># 显示所有UDP协议相关信息，及其所属进程</span><br><span class="line">ss -apu</span><br></pre></td></tr></table></figure><h1>traceroute</h1><p><strong>功能</strong></p><blockquote><p>测试当前主机到目标主机间经过的网络节点</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 检测当前主机到IP地址为192.168.1.1的主机间经过的网络节点</span><br><span class="line">traceroute 192.168.1.1</span><br><span class="line"></span><br><span class="line"># 检测当前主机到域名为www.baidu.com的主机间经过的网络节点</span><br><span class="line">traceroute www.baidu.com</span><br></pre></td></tr></table></figure><h1>nslookup</h1><p><strong>功能</strong></p><blockquote><p>域名解析</p></blockquote><h1>dig</h1><p><strong>功能</strong></p><blockquote><p>域名解析</p></blockquote><h1>arp</h1><p><strong>功能</strong></p><blockquote><p>操作arp缓冲区</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示arp表（IP与MAC对于关系）</span><br><span class="line">arp -n</span><br><span class="line"># 显示arp表（主机名与MAC对应关系）</span><br><span class="line">arp -e</span><br></pre></td></tr></table></figure><h1>nmap</h1><p><strong>功能</strong></p><blockquote><p>端口扫描、网络扫描</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看本机开放的TCP端口</span><br><span class="line">nmap -sT 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 查看本机开放的UDP端口</span><br><span class="line">nmap -sU 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 扫描192.168.1.0/24网段中开放80端口的主机</span><br><span class="line">nmap -p 80 192.168.1.0/24</span><br><span class="line"></span><br><span class="line"># 扫描192.168.1.0/24网段中有哪些存活的主机</span><br><span class="line">nmap -n -sP 192.168.1.0/24</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;ifconfig&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示网络设备信息&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;常用参数示例&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highli</summary>
      
    
    
    
    <category term="Linux" scheme="http://zhongriqian.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://zhongriqian.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数采网关程序——Modbus-RTU与MQTT协议转换</title>
    <link href="http://zhongriqian.github.io/2022/08/17/%E6%95%B0%E9%87%87%E7%BD%91%E5%85%B3%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94Modbus-RTU%E4%B8%8EMQTT%E5%8D%8F%E8%AE%AE%E8%BD%AC%E6%8D%A2/"/>
    <id>http://zhongriqian.github.io/2022/08/17/%E6%95%B0%E9%87%87%E7%BD%91%E5%85%B3%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94Modbus-RTU%E4%B8%8EMQTT%E5%8D%8F%E8%AE%AE%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-08-16T16:00:00.000Z</published>
    <updated>2023-01-28T08:53:58.637Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;modbus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;MQTTClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDRESS     <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLIENTID    <span class="string">&quot;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOOP             10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_ID        1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDRESS_START    0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDRESS_END      4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CODE             1</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">publish</span><span class="params">(MQTTClient client, <span class="type">char</span>* topic, <span class="type">char</span>* payload)</span> &#123;</span><br><span class="line">    MQTTClient_message pubmsg = MQTTClient_message_initializer;</span><br><span class="line">    pubmsg.payload = payload;</span><br><span class="line">    pubmsg.payloadlen = <span class="built_in">strlen</span>(pubmsg.payload);</span><br><span class="line">    pubmsg.qos = <span class="number">2</span>;</span><br><span class="line">    pubmsg.retained = <span class="number">0</span>;</span><br><span class="line">    MQTTClient_deliveryToken token;</span><br><span class="line">    MQTTClient_publishMessage(client, topic, &amp;pubmsg, &amp;token);</span><br><span class="line">    MQTTClient_waitForCompletion(client, token, <span class="number">1000L</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Message &#x27;%s&#x27; with delivery token %d delivered\n&quot;</span>, payload, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">on_message</span><span class="params">(<span class="type">void</span> *context, <span class="type">char</span> *topicName, <span class="type">int</span> topicLen, MQTTClient_message *message)</span> &#123;</span><br><span class="line">    <span class="type">char</span>* payload = message-&gt;payload;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Received operation %s\n&quot;</span>, payload);</span><br><span class="line">    MQTTClient_freeMessage(&amp;message);</span><br><span class="line">    MQTTClient_free(topicName);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">modbus_t</span> *ctx;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">int</span> nb_fail;</span><br><span class="line">    <span class="type">int</span> nb_loop;</span><br><span class="line">    <span class="type">int</span> addr;</span><br><span class="line">    <span class="type">int</span> nb;</span><br><span class="line">    <span class="type">uint8_t</span> *tab_rp_bits;</span><br><span class="line">    <span class="type">uint16_t</span> *tab_rp_registers;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*MQTT initialize*/</span></span><br><span class="line">    MQTTClient client;</span><br><span class="line">    MQTTClient_create(&amp;client, ADDRESS, CLIENTID, MQTTCLIENT_PERSISTENCE_NONE, <span class="literal">NULL</span>);</span><br><span class="line">    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;</span><br><span class="line">    conn_opts.username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    conn_opts.password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    MQTTClient_setCallbacks(client, <span class="literal">NULL</span>, <span class="literal">NULL</span>, on_message, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> rc_mqtt;</span><br><span class="line">    <span class="keyword">if</span> ((rc_mqtt = MQTTClient_connect(client, &amp;conn_opts)) != MQTTCLIENT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to connect, return code %d\n&quot;</span>, rc_mqtt);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//create device</span></span><br><span class="line">    publish(client, <span class="string">&quot;s/us&quot;</span>, <span class="string">&quot;100,USTB_TEST,c8y_MQTTDevice&quot;</span>);</span><br><span class="line">    <span class="comment">//set hardware information</span></span><br><span class="line">    publish(client, <span class="string">&quot;s/us&quot;</span>, <span class="string">&quot;110,S123456789,MQTT test model,Rev0.1&quot;</span>);</span><br><span class="line">    <span class="comment">//listen for operation</span></span><br><span class="line">    MQTTClient_subscribe(client, <span class="string">&quot;s/ds&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/* RTU */</span></span><br><span class="line">    ctx = modbus_new_rtu(<span class="string">&quot;/dev/ttyS1&quot;</span>, <span class="number">19200</span>, <span class="string">&#x27;N&#x27;</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    modbus_set_slave(ctx, SERVER_ID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* TCP */</span></span><br><span class="line"><span class="comment">//    ctx = modbus_new_tcp(&quot;127.0.0.1&quot;, 1502);</span></span><br><span class="line"><span class="comment">//    ctx = modbus_new_tcp(&quot;192.168.72.61&quot;, 502);</span></span><br><span class="line"><span class="comment">//    modbus_set_debug(ctx, TRUE);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modbus_connect(ctx) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Connection failed: %s\n&quot;</span>,</span><br><span class="line">                modbus_strerror(errno));</span><br><span class="line">        modbus_free(ctx);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nb = ADDRESS_END - ADDRESS_START;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(CODE == <span class="number">1</span> || CODE == <span class="number">2</span>)&#123;</span><br><span class="line">        tab_rp_bits = (<span class="type">uint8_t</span> *) <span class="built_in">malloc</span>(nb * <span class="keyword">sizeof</span>(<span class="type">uint8_t</span>));</span><br><span class="line">        <span class="built_in">memset</span>(tab_rp_bits, <span class="number">0</span>, nb * <span class="keyword">sizeof</span>(<span class="type">uint8_t</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        tab_rp_registers = (<span class="type">uint16_t</span> *) <span class="built_in">malloc</span>(nb * <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>));</span><br><span class="line">        <span class="built_in">memset</span>(tab_rp_registers, <span class="number">0</span>, nb * <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nb_loop = nb_fail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (nb_loop++ &lt; LOOP) &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        addr = ADDRESS_START;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span>(CODE)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: rc = modbus_read_bits(ctx, addr, nb, tab_rp_bits);<span class="keyword">break</span>;                    <span class="comment">// modbus功能码01</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: rc = modbus_read_input_bits(ctx, addr, nb, tab_rp_bits);<span class="keyword">break</span>;              <span class="comment">// modbus功能码02</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: rc = modbus_read_registers(ctx, addr, nb, tab_rp_registers);<span class="keyword">break</span>;          <span class="comment">// modbus功能码03</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: rc = modbus_read_input_registers(ctx, addr, nb, tab_rp_registers);<span class="keyword">break</span>;    <span class="comment">// modbus功能码04</span></span><br><span class="line">            <span class="keyword">default</span>: rc = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&lt;&lt;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rc != nb) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ERROR modbus_read_registers (%d)\n&quot;</span>, rc);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Address = %d, nb = %d\n&quot;</span>, addr, nb);</span><br><span class="line">            nb_fail++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;nb; i++) &#123;</span><br><span class="line">                buffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">switch</span>(CODE)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Status = %X\n&quot;</span>, addr+i, tab_rp_bits[i]);</span><br><span class="line">                            <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_bits[i]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Status = %X\n&quot;</span>, addr+i, tab_rp_bits[i]);</span><br><span class="line">                           <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_bits[i]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Value = %d\n&quot;</span>, ADDRESS_START+i, tab_rp_registers[i]);</span><br><span class="line">                           <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_registers[i]);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Value = %d\n&quot;</span>, ADDRESS_START+i, tab_rp_registers[i]);</span><br><span class="line">                           <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_registers[i]);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                publish(client, <span class="string">&quot;s/us&quot;</span>,buffer);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;LOOP: %d, CODE: %d\n&quot;</span>, nb_loop, CODE);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Read: &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (nb_fail)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d FAILS\n&quot;</span>, nb_fail);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;SUCCESS\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Free the memory */</span></span><br><span class="line">    <span class="built_in">free</span>(tab_rp_registers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Close the connection */</span></span><br><span class="line">    modbus_close(ctx);</span><br><span class="line">    modbus_free(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="C" scheme="http://zhongriqian.github.io/categories/C/"/>
    
    
    <category term="C" scheme="http://zhongriqian.github.io/tags/C/"/>
    
    <category term="Modbus RTU" scheme="http://zhongriqian.github.io/tags/Modbus-RTU/"/>
    
    <category term="MQTT" scheme="http://zhongriqian.github.io/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>Python计算TBS程序</title>
    <link href="http://zhongriqian.github.io/2022/05/16/Python%E8%AE%A1%E7%AE%97TBS%E7%A8%8B%E5%BA%8F/"/>
    <id>http://zhongriqian.github.io/2022/05/16/Python%E8%AE%A1%E7%AE%97TBS%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-05-15T16:00:00.000Z</published>
    <updated>2023-01-28T08:53:37.398Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N_PRB</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    由给定参数获得分配给PDSCH的PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path, scs, bw</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建PRB查询对象</span></span><br><span class="line"><span class="string">        :param file_path: PRB表的路径（该表可由scs和bw查PRB值）</span></span><br><span class="line"><span class="string">        :param scs: sub carrier spacing，子载波间隔（kHz）</span></span><br><span class="line"><span class="string">        :param bw: bandwidth，载波带宽（MHz）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.table = load_workbook(file_path)</span><br><span class="line">        self.sheet = self.table[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line">        self.scs = scs</span><br><span class="line">        self.bw = bw</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_prb</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        通过参数scs和bw查表得到PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">        :return:PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> self.scs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>, <span class="number">78</span>):</span><br><span class="line">                        <span class="keyword">if</span> self.bw == <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="string">&#x27;1&#x27;</span>].value):</span><br><span class="line">                            N_prb = <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="built_in">str</span>(line)].value)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;scs=%dkHz，bw=%dMHz ===&gt; PRB数量=%d&quot;</span> % (self.scs, self.bw, N_prb))</span><br><span class="line">            <span class="keyword">return</span> N_prb</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_N_prb运行失败，scs=%dkHz,bw=%dMHz无对应PRB值&quot;</span> % (self.scs, self.bw))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TBS</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过给定参数获得TBS（Transport Block Size，传输块大小）数值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, N_prb, file_path, Imcs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建Imcs表对象，相关参数赋值</span></span><br><span class="line"><span class="string">        :param N_prb:PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">        :param file_path:Imcs表的路径，该表可由Imcs（Modulation and Coding Scheme index，调制与编码策略索引）值</span></span><br><span class="line"><span class="string">                        查对应qm（调制阶数）和R（码率）</span></span><br><span class="line"><span class="string">        :param Imcs:Imcs（Modulation and Coding Scheme index，调制与编码策略索引）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.N_prb = N_prb</span><br><span class="line">        self.table = load_workbook(file_path)</span><br><span class="line">        self.sheet = self.table[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line">        self.N_rb_sc = <span class="number">12</span>  <span class="comment"># 一个RB中的子载波个数</span></span><br><span class="line">        self.N_sh_symb = <span class="number">13</span>  <span class="comment"># 一个时隙中分配给PDSCH的符号数</span></span><br><span class="line">        self.N_prb_oh = <span class="number">0</span>  <span class="comment"># 由高层参数决定</span></span><br><span class="line">        self.N_prb_dmrs = <span class="number">12</span>  <span class="comment"># 一个时隙中一个PRB宽度中DMRS占用的子载波，DMRS tpye1和DMRS type2两种类型</span></span><br><span class="line">        self.Imcs = Imcs  <span class="comment"># Imcs（Modulation and Coding Scheme index，调制与编码策略索引）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_re</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算给定带宽中一个时隙内分配给PDSCH的RE（Resource Element，资源元素）数量</span></span><br><span class="line"><span class="string">        :return: RE（Resource Element，资源元素）数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            N_re_t = <span class="built_in">min</span>(<span class="number">156</span>, self.N_rb_sc * self.N_sh_symb - self.N_prb_dmrs - self.N_prb_oh)</span><br><span class="line">            N_re = <span class="built_in">int</span>(N_re_t * self.N_prb)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;在包含%d个RB的带宽中，一个时隙内分配给PDSCH的RE数量=%d&quot;</span> % (self.N_prb, N_re))</span><br><span class="line">            <span class="keyword">return</span> N_re</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Calculate_N_re运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算信息比特数</span></span><br><span class="line"><span class="string">        :return:信息比特数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Nre = self.calculate_N_re()</span><br><span class="line">            v = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">34</span>):</span><br><span class="line">                <span class="keyword">if</span> self.Imcs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    qm = <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;B&#x27;</span> + <span class="built_in">str</span>(line)].value)</span><br><span class="line">                    R = <span class="built_in">float</span>(self.sheet[<span class="string">&#x27;c&#x27;</span> + <span class="built_in">str</span>(line)].value) / <span class="number">1024</span></span><br><span class="line">            N_info = Nre * qm * v * R</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;MAC层向物理层传输的一个TB中的信息比特数=%d bits&quot;</span> % N_info)</span><br><span class="line">            <span class="keyword">return</span> N_info</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_N_info运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_q_N_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算信息比特数的量化中间数</span></span><br><span class="line"><span class="string">        :return:信息比特数的量化中间数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Ninfo = self.calculate_N_info()</span><br><span class="line">            <span class="keyword">if</span> Ninfo &gt; <span class="number">3824</span>:</span><br><span class="line">                n = <span class="built_in">int</span>(math.log((Ninfo - <span class="number">24</span>), <span class="number">2</span>) - <span class="number">5</span>)</span><br><span class="line">                q_N_info = <span class="built_in">max</span>(<span class="number">3840</span>, math.<span class="built_in">pow</span>(<span class="number">2</span>, n) * <span class="built_in">round</span>((Ninfo - <span class="number">24</span>) / math.<span class="built_in">pow</span>(<span class="number">2</span>, n)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n = <span class="built_in">max</span>(<span class="number">3</span>, <span class="built_in">int</span>(math.log(Ninfo, <span class="number">2</span>) - <span class="number">6</span>))</span><br><span class="line">                q_N_info = <span class="built_in">max</span>(<span class="number">24</span>, math.<span class="built_in">pow</span>(<span class="number">2</span>, n) * <span class="built_in">round</span>(Ninfo / math.<span class="built_in">pow</span>(<span class="number">2</span>, n)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;信息比特数的量化中间值=%d bits&quot;</span> % q_N_info)</span><br><span class="line">            <span class="keyword">return</span> q_N_info</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_q_N_info运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_TBS</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算TBS（Transport Block Size，传输块大小）</span></span><br><span class="line"><span class="string">        :return: TBS（Transport Block Size，传输块大小）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            qNinfo = self.calculate_q_N_info()</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">34</span>):</span><br><span class="line">                <span class="keyword">if</span> self.Imcs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    R = <span class="built_in">float</span>(self.sheet[<span class="string">&#x27;c&#x27;</span> + <span class="built_in">str</span>(line)].value) / <span class="number">1024</span></span><br><span class="line">            <span class="keyword">if</span> R &lt; <span class="number">0.25</span>:</span><br><span class="line">                C = math.ceil(<span class="built_in">float</span>(qNinfo + <span class="number">24</span>) / <span class="number">3816</span>)</span><br><span class="line">                TBS = <span class="number">8</span> * C * math.ceil((qNinfo + <span class="number">24</span>) / (<span class="number">8</span> * C)) - <span class="number">24</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                C = math.ceil(<span class="built_in">float</span>(qNinfo + <span class="number">24</span>) / <span class="number">8424</span>)</span><br><span class="line">                <span class="keyword">if</span> qNinfo &gt; <span class="number">8424</span>:</span><br><span class="line">                    TBS = <span class="number">8</span> * C * math.ceil((qNinfo + <span class="number">24</span>) / (<span class="number">8</span> * C)) - <span class="number">24</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    TBS = <span class="number">8</span> * math.ceil((qNinfo + <span class="number">24</span>) / (<span class="number">8</span> * C)) - <span class="number">24</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;TBS = %d bits&#x27;</span> % TBS)</span><br><span class="line">            <span class="keyword">return</span> TBS</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_TBS运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N_bits</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算在给定参数下，一个RB所含的比特数、一个OFDM符号所含比特数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path, xQAM, scs, bw</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param file_path: PRB表的路径（该表可由scs和bw查PRB值）</span></span><br><span class="line"><span class="string">        :param xQAM: 调制方式，16QAM, 64QAM and 256QAM</span></span><br><span class="line"><span class="string">        :param scs: sub carrier spacing，子载波间隔（kHz）</span></span><br><span class="line"><span class="string">        :param bw: bandwidth，载波带宽（MHz）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.table = load_workbook(file_path)</span><br><span class="line">        self.sheet = self.table[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line">        self.xQAM = xQAM</span><br><span class="line">        self.scs = scs</span><br><span class="line">        self.bw = bw</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_RPB_bits</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 一个RB所含的比特数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        N_prb_bits = math.log(self.xQAM, <span class="number">2</span>) * <span class="number">12</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;选用%dQAM调制，一个RB所含比特数=%d bits&quot;</span> % (self.xQAM, N_prb_bits))</span><br><span class="line">        <span class="keyword">return</span> N_prb_bits</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_symb_bits</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 一个OFDM符号所含的比特数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> self.scs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>, <span class="number">78</span>):</span><br><span class="line">                        <span class="keyword">if</span> self.bw == <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="string">&#x27;1&#x27;</span>].value):</span><br><span class="line">                            N_prb = <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="built_in">str</span>(line)].value)</span><br><span class="line">            N_symb_bits = N_prb * math.log(self.xQAM, <span class="number">2</span>) * <span class="number">12</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;scs=%dkHZ，bw=%dMHz，选用%dQAM调制，一个OFDM符号所含比特数=%d bits&quot;</span> % (self.scs, self.bw, self.xQAM, N_symb_bits))</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_N_symb_bits运行失败，scs=%dkHz,bw=%dMHz无对应PRB值&quot;</span> % (self.scs, self.bw))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建N_PRB对象,参数scs=30，bw=100</span></span><br><span class="line">    n = N_PRB(<span class="string">&#x27;maximum_transmission_bandwidth_configuration_Nrb.xlsx&#x27;</span>, <span class="number">15</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 查询PRB数量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/---------------------------------------------------------------\\&quot;</span>)</span><br><span class="line">    Nprb = n.calculate_N_prb()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\---------------------------------------------------------------/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建TBS对象</span></span><br><span class="line">    TBS1 = TBS(Nprb, <span class="string">&#x27;MCS index table 2 for PDSCH.xlsx&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">    <span class="comment"># TBS1.calculate_N_re()</span></span><br><span class="line">    <span class="comment"># TBS1.calculate_N_info()</span></span><br><span class="line">    <span class="comment"># TBS1.calculate_q_N_info()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/---------------------------------------------------------------\\&quot;</span>)</span><br><span class="line">    TBS1.calculate_TBS()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\---------------------------------------------------------------/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建N_bits对象</span></span><br><span class="line">    xQAM_RB = N_bits(<span class="string">&#x27;maximum_transmission_bandwidth_configuration_Nrb.xlsx&#x27;</span>, <span class="number">64</span>, <span class="number">30</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/---------------------------------------------------------------\\&quot;</span>)</span><br><span class="line">    xQAM_RB.calculate_N_RPB_bits()</span><br><span class="line">    xQAM_RB.calculate_N_symb_bits()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\---------------------------------------------------------------/&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/tags/Python/"/>
    
    <category term="5G" scheme="http://zhongriqian.github.io/tags/5G/"/>
    
    <category term="TBS" scheme="http://zhongriqian.github.io/tags/TBS/"/>
    
  </entry>
  
  <entry>
    <title>Python+Docker实现人脸识别远程监控系统</title>
    <link href="http://zhongriqian.github.io/2022/05/07/Python+Docker%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zhongriqian.github.io/2022/05/07/Python+Docker%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2023-01-28T14:54:46.652Z</updated>
    
    <content type="html"><![CDATA[<h1>说明</h1><p>本项目包括服务端程序和客户端程序。服务端使用Python OpenCV库实现人脸识别功能，并将添加上识别结果的视频流通过TCP发送给客户端，且支持将上述功能程序封装为Docker容器；客户端程序通过IP+端口接入服务端，接收视频流，实时查看人脸识别结果。客户端可与服务端断开接入后重新连接，不影响服务端功能。</p><h1>项目文件</h1><blockquote><ul><li><a href="http://tcpsend.py">tcpsend.py</a>（服务端程序）</li><li><a href="http://tcpreceive.py">tcpreceive.py</a>（客户端程序）</li><li>requirements.txt（项目依赖）</li><li><a href="http://train.py">train.py</a>（人脸识别模型训练程序）</li><li>trainer.yml（人脸识别模型）</li><li>haarcascade_frontalface_alt2.xml（分类器）</li><li>Dockerfile（构建Docker镜像所需文件）</li></ul></blockquote><h1>项目源码</h1><h2 id="tcpsend-py"><a href="http://tcpsend.py">tcpsend.py</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npip</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">address = (<span class="string">&#x27;ip&#x27;</span>, <span class="number">5555</span>)  <span class="comment"># 服务端地址和端口</span></span><br><span class="line">ser = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">ser.bind(address)</span><br><span class="line">ser.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 阻塞式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;waiting。。。&#x27;</span>)</span><br><span class="line">conn, addr = ser.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;建立连接...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;连接对象：&#x27;</span>, addr)</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># cap = cv2.VideoCapture(0)</span></span><br><span class="line">frames_num=cap.get(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;视频总帧数：&#x27;</span>,frames_num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;发送目标...&#x27;</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#加载训练数据集文件</span></span><br><span class="line">recogizer = cv2.face.LBPHFaceRecognizer_create()</span><br><span class="line">recogizer.read(<span class="string">&#x27;./trainer.yml&#x27;</span>)</span><br><span class="line">names = []</span><br><span class="line">warningtime = <span class="number">0</span></span><br><span class="line"><span class="comment">#准备识别的图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>(<span class="params">img</span>):</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  <span class="comment"># 转换为灰度</span></span><br><span class="line">    face_detector = cv2.CascadeClassifier(<span class="string">&#x27;./haarcascade_frontalface_alt2.xml&#x27;</span>)</span><br><span class="line">    face = face_detector.detectMultiScale(gray, <span class="number">1.1</span>, <span class="number">5</span>, cv2.CASCADE_SCALE_IMAGE, (<span class="number">100</span>, <span class="number">100</span>), (<span class="number">300</span>, <span class="number">300</span>))</span><br><span class="line">    <span class="comment"># face=face_detector.detectMultiScale(gray)</span></span><br><span class="line">    <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> face:</span><br><span class="line">        cv2.rectangle(img, (x, y), (x+w, y+h), color=(<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), thickness=<span class="number">2</span>)  <span class="comment"># blue,green,red</span></span><br><span class="line">        <span class="comment"># cv2.circle(img,center=(x+w//2,y+h//2),radius=w//2,color=(0,255,0),thickness=1)</span></span><br><span class="line">        <span class="comment"># 人脸识别</span></span><br><span class="line">        ids, confidence = recogizer.predict(gray[y:y + h, x:x + w])</span><br><span class="line">        <span class="comment"># print(&#x27;标签id:&#x27;,ids,&#x27;置信评分：&#x27;, confidence)</span></span><br><span class="line">        <span class="keyword">if</span> confidence &gt; <span class="number">80</span>:</span><br><span class="line">            cv2.putText(img, <span class="string">&#x27;unkonw&#x27;</span>, (x + <span class="number">10</span>, y - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, (<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv2.putText(img, <span class="string">&#x27;dong&#x27;</span>, (x + <span class="number">10</span>, y - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, (<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;result&#x27;, img)</span></span><br><span class="line">    <span class="comment"># print(&#x27;bug:&#x27;,ids)</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>():</span><br><span class="line">    path = <span class="string">&#x27;./dataset/&#x27;</span></span><br><span class="line">    <span class="comment">#  names = []</span></span><br><span class="line">    imagePaths = [os.path.join(path, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line">       name = <span class="built_in">str</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>, <span class="number">2</span>)[<span class="number">1</span>])</span><br><span class="line">       names.append(name)</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#name()</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    flag, frame = cap.read()</span><br><span class="line">    frame = face_detect_demo(frame)</span><br><span class="line">    <span class="comment"># frame = cv2.resize(frame, (1280, 720))</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;send&#x27;, frame)</span></span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 数据打包有很多方式，也可以用json打包</span></span><br><span class="line">    img_encode = cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, frame)[<span class="number">1</span>]</span><br><span class="line">    data_encode = np.array(img_encode)</span><br><span class="line">    str_encode = data_encode.tostring()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.sendall(str_encode)</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        conn, addr = ser.accept()</span><br></pre></td></tr></table></figure><h2 id="tcpreceive-py"><a href="http://tcpreceive.py">tcpreceive.py</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">address = (<span class="string">&#x27;ip&#x27;</span>, <span class="number">5555</span>)  <span class="comment"># 服务端地址和端口</span></span><br><span class="line">cli = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cli.connect(address)  <span class="comment"># 尝试连接服务端</span></span><br><span class="line"><span class="keyword">except</span> Exception:ip</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[!] Server not found or not open&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">frame_count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time1 = time.time() <span class="keyword">if</span> frame_count == <span class="number">1</span> <span class="keyword">else</span> time1</span><br><span class="line">    trigger = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    cli.sendall(trigger.encode())</span><br><span class="line">    data = cli.recv(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">20</span>)</span><br><span class="line">    image = np.frombuffer(data, np.uint8)</span><br><span class="line">    image = cv2.imdecode(image, cv2.IMREAD_COLOR)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;video&#x27;</span>, image)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    time2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(image.shape[:<span class="number">2</span>], <span class="built_in">int</span>(frame_count / (time2 - time1)))</span><br><span class="line">    frame_count += <span class="number">1</span></span><br><span class="line">cli.close()</span><br></pre></td></tr></table></figure><h2 id="train-py"><a href="http://train.py">train.py</a></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImageAndLabels</span>(<span class="params">path</span>):</span><br><span class="line">    facesSamples = []  <span class="comment"># 储存人脸数据</span></span><br><span class="line">    ids = []  <span class="comment"># 尺寸姓名数据</span></span><br><span class="line">    imagePaths = [os.path.join(path, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]  <span class="comment"># 储存图片信息</span></span><br><span class="line">    face_detector = cv.CascadeClassifier(<span class="string">&#x27;D:/Python/python3.9.8/Lib/site-packages/cv2/data/haarcascade_frontalface_alt2.xml&#x27;</span>)  <span class="comment"># 加载分类器</span></span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:  <span class="comment"># 遍历列表中的图片</span></span><br><span class="line">        PIL_img = Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&#x27;L&#x27;</span>)  <span class="comment"># 打开图片，灰度化(PIL有九种模式：1,L,P,RGB,RGBA,CMYK,YCbCr,YCbCr,I,F)</span></span><br><span class="line">        img_numpy = np.array(PIL_img, <span class="string">&#x27;uint8&#x27;</span>)  <span class="comment"># 将图片转换为数组，以黑白深浅</span></span><br><span class="line">        faces = face_detector.detectMultiScale(img_numpy)  <span class="comment"># 获取图片人脸特征</span></span><br><span class="line">        <span class="built_in">id</span> = <span class="built_in">int</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])  <span class="comment"># 获取每张图片的id和姓名</span></span><br><span class="line">        <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> faces:</span><br><span class="line">            ids.append(<span class="built_in">id</span>)</span><br><span class="line">            facesSamples.append(img_numpy[y:y+h, x:x+w])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fs:&#x27;</span>, facesSamples)</span><br><span class="line">    <span class="keyword">return</span> facesSamples, ids</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;./dataset/&#x27;</span>  <span class="comment"># 图片路径</span></span><br><span class="line">    faces, ids = getImageAndLabels(path)  <span class="comment"># 获取图像数组和id标签数据和姓名</span></span><br><span class="line">    recognizer = cv.face.LBPHFaceRecognizer_create()  <span class="comment"># 加载识别器</span></span><br><span class="line">    recognizer.train(faces, np.array(ids))  <span class="comment"># 训练</span></span><br><span class="line">    recognizer.write(<span class="string">&#x27;./trainer/trainer.yml&#x27;</span>)  <span class="comment"># 保存文件</span></span><br></pre></td></tr></table></figure><h2 id="requirements-txt">requirements.txt</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numpy==1.21.5</span><br><span class="line">Pillow==9.1.0</span><br><span class="line">opencv-contrib-python==4.5.5.64</span><br><span class="line">opencv-python==4.5.5.64</span><br></pre></td></tr></table></figure><h2 id="Dockerfile">Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./facerecognitionserver /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y libgl1-mesa-glx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y libglib2.0-dev</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;/code/tcpsend.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;说明&lt;/h1&gt;
&lt;p&gt;本项目包括服务端程序和客户端程序。服务端使用Python OpenCV库实现人脸识别功能，并将添加上识别结果的视频流通过TCP发送给客户端，且支持将上述功能程序封装为Docker容器；客户端程序通过IP+端口接入服务端，接收视频流，实时查看人脸识别结</summary>
      
    
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/tags/Python/"/>
    
    <category term="Docker" scheme="http://zhongriqian.github.io/tags/Docker/"/>
    
    <category term="OpenCV" scheme="http://zhongriqian.github.io/tags/OpenCV/"/>
    
    <category term="Socket" scheme="http://zhongriqian.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取王蛇属蛇类科普网站数据</title>
    <link href="http://zhongriqian.github.io/2022/03/21/Python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%9B%87%E5%B1%9E%E8%9B%87%E7%B1%BB%E7%A7%91%E6%99%AE%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/"/>
    <id>http://zhongriqian.github.io/2022/03/21/Python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%9B%87%E5%B1%9E%E8%9B%87%E7%B1%BB%E7%A7%91%E6%99%AE%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/</id>
    <published>2022-03-20T16:00:00.000Z</published>
    <updated>2023-01-28T08:53:46.685Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建文件夹</span></span><br><span class="line"><span class="string">    :param path: 文件夹路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_save</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    下载图片并保存图片对应信息</span></span><br><span class="line"><span class="string">    :param data:从网页爬取的元组格式数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    photo_url_all = <span class="string">&quot;https://sites.pitt.edu/~mcs2/herp/&quot;</span> + data[<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># print(photo_url_all)</span></span><br><span class="line">    <span class="comment"># 获取图片页面内容</span></span><br><span class="line">    resp_photo_page = requests.get(photo_url_all)</span><br><span class="line">    photo_page_content = resp_photo_page.text</span><br><span class="line">    photo_page_content_html = etree.HTML(photo_page_content)</span><br><span class="line">    <span class="comment"># xpath获取图片页面内每张图片的下载地址</span></span><br><span class="line">    src = photo_page_content_html.xpath(<span class="string">&#x27;/html/body/p/img/@src&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取要存放每组图片的文件夹名称，并创建对应名称的文件夹</span></span><br><span class="line">    folder_name = (data[<span class="number">3</span>].split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    mkdir(<span class="string">&quot;data/&quot;</span> + folder_name)</span><br><span class="line">    <span class="keyword">for</span> itt <span class="keyword">in</span> src:</span><br><span class="line">        <span class="comment"># 逐张保存</span></span><br><span class="line">        src = <span class="string">&quot;https://sites.pitt.edu/~mcs2/herp/&quot;</span> + itt</span><br><span class="line">        src_resp = requests.get(src)</span><br><span class="line">        photo_name = src.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/&quot;</span> + folder_name + <span class="string">&#x27;/&#x27;</span> + photo_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(src_resp.content)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 创建每组图片的信息文本，并写入信息</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/&quot;</span> + folder_name + <span class="string">&#x27;/&#x27;</span> + folder_name + <span class="string">&#x27;.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">        ff.write(<span class="string">&quot;Scientific Name : %s\n&quot;</span> % data[<span class="number">0</span>])</span><br><span class="line">        ff.write(<span class="string">&quot;Common Name : %s\n&quot;</span> % data[<span class="number">1</span>])</span><br><span class="line">        ff.write(<span class="string">&quot;Adult Length : %s\n&quot;</span> % data[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://sites.pitt.edu/~mcs2/herp/Lampropeltis.html&quot;</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    page_content = resp.text</span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;/td&gt;.*?&lt;tr&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td nowrap valign = top&gt;(?P&lt;Scientific_Name&gt;.*?)&lt;/td&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td valign = top&gt;(?P&lt;Common_Name&gt;.*?)&lt;/td&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td nowrap align = right valign = top&gt;(?P&lt;Adult_Length&gt;.*?)&lt;/td&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td valign = top&gt;&lt;IMG SRC=&quot;.*?ball.gif&quot;&gt;\s?&lt;A\s+HREF=&quot;(?P&lt;Photo&gt;.*?)&quot;&gt;Photo&lt;/A&gt;&#x27;</span>, re.S</span><br><span class="line">                     )</span><br><span class="line">    <span class="comment"># 返回迭代器</span></span><br><span class="line">    <span class="comment"># result = obj.finditer(page_content)</span></span><br><span class="line">    <span class="comment"># for it in result:</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Scientific_Name&quot;))</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Common_Name&quot;))</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Adult_Length&quot;))</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Photo&quot;))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回列表</span></span><br><span class="line">    result = obj.findall(page_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多线程</span></span><br><span class="line">    <span class="comment"># with ThreadPoolExecutor(30) as t:</span></span><br><span class="line">    <span class="comment">#     for n in tqdm(result, &#x27;数据获取中&#x27;):</span></span><br><span class="line">    <span class="comment">#         t.submit(data_save, n)</span></span><br><span class="line">    <span class="comment"># print(&quot;数据获取完成&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单个依次获取</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> tqdm(result, <span class="string">&#x27;数据获取中&#x27;</span>):</span><br><span class="line">        data_save(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据获取完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="http://zhongriqian.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
