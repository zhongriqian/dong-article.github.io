<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-27T15:14:42.416Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker</title>
    <link href="http://example.com/2023/01/27/Docker/"/>
    <id>http://example.com/2023/01/27/Docker/</id>
    <published>2023-01-27T14:42:14.618Z</published>
    <updated>2023-01-27T15:14:42.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java —— apk —— 发布到应用商店 —— 用户下载apk —— 安装即可用</span><br><span class="line">java —— jar —— jar+环境打包成镜像 —— 发布到Docker仓库 —— 用户下载镜像 —— 直接就可以运行</span><br><span class="line">jar+环境打包的镜像，就好像windows系统的镜像，安装后里面有操作系统也有初始应用</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Docker核心思想：隔离</span><br></pre></td></tr></table></figure><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">虚拟机技术缺点：</span><br><span class="line">1.资源占用十分多</span><br><span class="line">2.冗余步骤多</span><br><span class="line">3.启动很慢</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">容器化技术</span><br><span class="line">容器化技术不是模拟的一个完整的操作系统</span><br><span class="line">容器内的应用直接运行在宿主机的内核上，容器自己没有内核，轻便</span><br><span class="line">每个容器互相隔离，每个容器内都有一个自己的文件系统，互不影响</span><br></pre></td></tr></table></figure><h2 id="基本组成"><a href="#基本组成" class="headerlink" title="基本组成"></a>基本组成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">镜像（image）：</span><br><span class="line">docker镜像好比一个模板，可以通过这个模板来创建容器</span><br><span class="line">最终服务运行或项目运行就是在容器中</span><br><span class="line">容器（container）：</span><br><span class="line">通过镜像来创建容器后，利用容器技术，独立运行一个或一组应用</span><br><span class="line">启动、停止、删除等基本命令</span><br><span class="line">仓库（repository）：</span><br><span class="line">存放镜像的地方</span><br><span class="line">官方：Docker Hub</span><br><span class="line">阿里云等也有容器服务（配置镜像加速）</span><br></pre></td></tr></table></figure><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socket从客户端访问</span><br><span class="line">Docker-Server接收到Docker-Client的指令，就会执行这个命令</span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\docker流程图.jpg" style="zoom: 50%;" /><img src="D:\tianruo_x64\保存图片\docker流程.png" style="zoom:50%;" /><img src="D:\tianruo_x64\保存图片\docker命令.jpg" style="zoom:50%;" /><img src="D:\tianruo_x64\保存图片\Dockerrun流程图.png" style="zoom:50%;" /><h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#查看状态</span><br><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h2 id="Docker卸载"><a href="#Docker卸载" class="headerlink" title="Docker卸载"></a>Docker卸载</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#卸载docker ce</span><br><span class="line">apt purge docker-ce</span><br><span class="line">#卸载docker ee</span><br><span class="line">apt purge docker-ee</span><br><span class="line">#删除docker镜像、容器、数据卷文件</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line">apt autoremove -y --purge docker.io</span><br></pre></td></tr></table></figure><h2 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h2><h3 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version  #显示docker版本信息</span><br><span class="line">docker info     #显示docker系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help  #帮助命令</span><br></pre></td></tr></table></figure><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docekr images #查看所有本地主机上的镜像</span><br><span class="line"></span><br><span class="line">REPOSITORY   镜像的仓库源</span><br><span class="line">TAG      镜像的标签</span><br><span class="line">IMAGE ID     镜像的ID</span><br><span class="line">CREATED      镜像的创建时间</span><br><span class="line">SIZE         镜像的大小</span><br><span class="line"></span><br><span class="line">-a #列出所有镜像</span><br><span class="line">-q #只显示镜像ID</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名 #搜索镜像</span><br><span class="line"></span><br><span class="line">--filter=STARS=3000 #搜索出来的镜像就是STARS大于3000的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名 #下载镜像</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名/ID #删除镜像</span><br><span class="line"></span><br><span class="line">-f #强制全部删除</span><br><span class="line">docker rm -f $(docker ps -aq)  #删除所有容器</span><br><span class="line">docker rmi -f $(docker images -aq)  #删除所有镜像</span><br></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image #新建容器</span><br><span class="line"></span><br><span class="line">#参数说明</span><br><span class="line">--name=Name容器名字</span><br><span class="line">-d后台方式运行</span><br><span class="line">-it使用交互式运行，进入容器查看内容</span><br><span class="line">-p指定容器端口</span><br><span class="line">-p IP：主机端口：容器端口</span><br><span class="line">-p 主机端口：容器端口  #映射</span><br><span class="line">-p 容器端口</span><br><span class="line">-P随机指定端口</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps #列出所有运行的容器</span><br><span class="line"></span><br><span class="line">-a #列出当前正在运行的容器+历史运行过的容器</span><br><span class="line">-n=？ #显示最近创建的？个容器</span><br><span class="line">-q #只显示容器ID</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #停止并退出容器</span><br><span class="line">Ctrl+P+Q #容器不停止退出</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID #删除容器，但不能删除正在运行的容器</span><br><span class="line"></span><br><span class="line">-f #强制删除所有容器</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start ID #启动容器</span><br><span class="line">docker restart ID #重启容器</span><br><span class="line">docker stop ID #停止当前正在运行的容器</span><br><span class="line">docker kill ID #强制停止当前容器</span><br></pre></td></tr></table></figure><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d 镜像名 #后台启动容器</span><br><span class="line">#docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止，docker ps 会发现容器没在运行</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker logs ID #显示日志</span><br><span class="line"></span><br><span class="line">-f #动态显示</span><br><span class="line">-t #带时间戳</span><br><span class="line">--tail ？ #显示？条日志</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top ID #查看容器中进程信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect ID #查看镜像的元数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ID /bin/bash   #进入当前正在运行的容器，进入容器后开启一个新的终端</span><br><span class="line">docker attach ID   #进入当前正在运行的容器，进入容器后进入正在执行的终端，不会启动新的进程</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp ID:容器内路径 目的主机路径 #查看当前主机目录</span><br></pre></td></tr></table></figure><h3 id="容器交互命令"><a href="#容器交互命令" class="headerlink" title="容器交互命令"></a>容器交互命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">复制主机文件到容器内：</span><br><span class="line">docker cp 主机文件路径 容器ID:容器路径</span><br></pre></td></tr></table></figure><h2 id="使用阿里云镜像加速器"><a href="#使用阿里云镜像加速器" class="headerlink" title="使用阿里云镜像加速器"></a>使用阿里云镜像加速器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /etc/docker</span><br><span class="line">[root@localhost ~]# tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://9cpn8tt6.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">[root@localhost ~]# systemctl daemon-reload</span><br><span class="line">[root@localhost ~]# systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><h3 id="联合文件系统-UnionFS"><a href="#联合文件系统-UnionFS" class="headerlink" title="联合文件系统 UnionFS"></a>联合文件系统 UnionFS</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是一种分层、轻量级并且高效的文件系统</span><br><span class="line">对文件系统的修改作为一次提交来一层一层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下</span><br><span class="line">一次同时加载多个文件系统，但从外面看，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</span><br></pre></td></tr></table></figure><h3 id="docker镜像加载原理"><a href="#docker镜像加载原理" class="headerlink" title="docker镜像加载原理"></a>docker镜像加载原理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统就是UnionFS</span><br><span class="line">bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统就会卸载bootfs。</span><br><span class="line">rootfs（root flie system），在bootfs之上。包含的就是典型Linux系统中的/dev，/proc，/bin，/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Cento等。</span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\docker镜像原理.png" style="zoom:38%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">虚拟机的CentOS都是几个G的，但包含CentOS的Docker镜像只有几百M</span><br><span class="line">对于一个精简的OS，rootfs可以很小，只需要包含最基本的命令，工具和程序库就可以，因为底层直接用主机的Kernel，自己只需要提供rootfs就可以。</span><br><span class="line">不同的linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以公用bootfs。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部</span><br><span class="line">这一层就是我们通常说的容器层，容器之下的是镜像曾</span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\docker镜像层容器层.png" style="zoom:38%;" /><h3 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h3><p>提交容器生成一个新的镜像</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; [容器ID] [目标镜像名:tag]</span><br></pre></td></tr></table></figure><h3 id="save命令-x2F-镜像另存为"><a href="#save命令-x2F-镜像另存为" class="headerlink" title="save命令&#x2F;镜像另存为"></a>save命令&#x2F;镜像另存为</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker save 镜像ID/镜像名称 &gt; 保存路径</span><br><span class="line">如：docker save 12342141 &gt; /root/image.tar</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最好使用镜像名称保存，这样在其他服务器导入镜像后，镜像名和之前一样，且能通过docker images找到此镜像</span><br><span class="line">而使用镜像ID保存，在其他服务器导入镜像后，通过docker images找不到此镜像</span><br></pre></td></tr></table></figure><h3 id="导入镜像"><a href="#导入镜像" class="headerlink" title="导入镜像"></a>导入镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; 路径</span><br></pre></td></tr></table></figure><h3 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h3><p>在构建镜像时出现错误，导致镜像的repository和tag都是none，即为虚悬镜像<br>这种镜像应及时清理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有虚悬镜像</span><br><span class="line">dcoker image ls -f dangling=true</span><br><span class="line"># 删除所有虚悬镜像</span><br><span class="line">docker image prune</span><br></pre></td></tr></table></figure><h2 id="Docker数据卷"><a href="#Docker数据卷" class="headerlink" title="Docker数据卷"></a>Docker数据卷</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数据持久化</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指定路径挂载</span><br><span class="line">docker run -it -v 主机路径:容器内路径</span><br></pre></td></tr></table></figure><h3 id="具名挂载和匿名挂载"><a href="#具名挂载和匿名挂载" class="headerlink" title="具名挂载和匿名挂载"></a>具名挂载和匿名挂载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">匿名挂载：</span><br><span class="line">docker run -it -v 容器内路径</span><br><span class="line">会生成一个随机生成的卷名</span><br><span class="line"></span><br><span class="line">具名挂载：</span><br><span class="line">docker run -it -v [卷名:容器内路径]</span><br><span class="line"></span><br><span class="line">两种方式都会将容器内路径挂载到</span><br><span class="line">/var/lib/docker/volumes/卷名/_data</span><br><span class="line"></span><br><span class="line">docker run -it -v [卷名:容器内路径]:ro</span><br><span class="line">readonly</span><br><span class="line">docker run -it -v [卷名:容器内路径]:rw</span><br><span class="line">readwrite</span><br><span class="line">设置了ro，就只能从外部路径改变容器文件内容</span><br></pre></td></tr></table></figure><h3 id="容器间挂载"><a href="#容器间挂载" class="headerlink" title="容器间挂载"></a>容器间挂载</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name=&quot;容器名01&quot; --volume-from [其他容器名02] [镜像名]</span><br><span class="line">挂载之后，01和02同步挂载到主机路径</span><br></pre></td></tr></table></figure><h2 id="Portainer"><a href="#Portainer" class="headerlink" title="Portainer"></a>Portainer</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。</span><br><span class="line">https://www.portainer.io/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">官网Linux环境安装</span><br><span class="line">#Install Portainer with Docker on Linux</span><br><span class="line">https://docs.portainer.io/v/ce-2.9/start/install/server/docker/linux</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">登录</span><br><span class="line">https://localhost:9443</span><br></pre></td></tr></table></figure><h2 id="CIG"><a href="#CIG" class="headerlink" title="CIG"></a>CIG</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CAdvisor+influxDB+Granfana，监控收集+存储数据+展示图表</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stats命令可以查看当前宿主机上的所有容器的CPU、内存以及网络流量等数据，但数据资料是实时的，不能存储，没有健康指标过线预警等功能</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CAdvisor是一个容器资源监控工具，包括容器的内存、CPU、网络IO、磁盘IO等监控，同时提供WEB页面用于查看容器的实时运行状态。但默认只存储2分钟的数据，而且只针对单物理机。</span><br><span class="line">主要功能：</span><br><span class="line">展示主机和容器两个层次的监控数据</span><br><span class="line">展示历史变化数据</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">influxDB是用Go语言编写的一个开源分布式时序、事件和指标数据库，无需外部依赖</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Granfana是一个开源的数据监控分析可视化平台，支持多种数据源配置（influxDB等）和丰富的插件机模板功能，支持图标权限控制和报警。</span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\cig.png" style="zoom:33%;" /><h3 id="compose部署CIG"><a href="#compose部署CIG" class="headerlink" title="compose部署CIG"></a>compose部署CIG</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"># docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: &#x27;3.1&#x27;</span><br><span class="line">volumes:</span><br><span class="line"> grafana_data: &#123;&#125;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line"> influxdb:</span><br><span class="line">  image: tutum/influxdb:0.9</span><br><span class="line">  restart: always</span><br><span class="line">  environment:</span><br><span class="line">   - PRE_CREATE_DB=cadvisor</span><br><span class="line">  ports:</span><br><span class="line">   - &quot;8083:8083&quot;</span><br><span class="line">   - &quot;8086:8086&quot;</span><br><span class="line">  volumes:</span><br><span class="line">   - ./data/influxdb:/data</span><br><span class="line"> </span><br><span class="line"> cadvisor:</span><br><span class="line">  image: google/cadvisor</span><br><span class="line">  links:</span><br><span class="line">   - influxdb:influxsrv</span><br><span class="line">  command: -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxsrv:8086</span><br><span class="line">  restart: always</span><br><span class="line">  ports:</span><br><span class="line">   - &quot;8080:8080&quot;</span><br><span class="line">  volumes:</span><br><span class="line">   - /:/rootfs:ro</span><br><span class="line">   - /var/run:/var/run:rw</span><br><span class="line">   - /sys:/sys:ro</span><br><span class="line">   - /var/lib/docker/:/var/lib/docker:ro</span><br><span class="line"> grafana:</span><br><span class="line">  user: &quot;104&quot;</span><br><span class="line">  image: grafana/grafana</span><br><span class="line">  user: &quot;104&quot;</span><br><span class="line">  restart: always</span><br><span class="line">  links:</span><br><span class="line">   - influxdb:influxsrv</span><br><span class="line">  ports:</span><br><span class="line">   - &quot;3000:3000&quot;</span><br><span class="line">  volumes:</span><br><span class="line">   - grafana_data:/var/lib/grafana</span><br><span class="line">  environment:</span><br><span class="line">   - HTTP_USER=admin</span><br><span class="line">   - HTTP_PASS=admin</span><br><span class="line">   - INFLUXDB_HOST=influxsrv</span><br><span class="line">   - INFLUXDB_PORT=8086</span><br><span class="line">   - INFLUXDB_NAME=cadvisor</span><br><span class="line">   - INFLUXDB_USER=root</span><br><span class="line">   - INFLUXDB_PASS=root</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">浏览cDdvisor收集服务</span><br><span class="line">http://ip:8080</span><br><span class="line">浏览influxdb存储服务</span><br><span class="line">http://ip:8083</span><br><span class="line">浏览grafana展示服务</span><br><span class="line">http://ip:3000</span><br><span class="line">默认账户密码都是admin</span><br><span class="line"></span><br><span class="line">注：关闭防火墙并开放所需的端口</span><br></pre></td></tr></table></figure><h3 id="Granfana配置"><a href="#Granfana配置" class="headerlink" title="Granfana配置"></a>Granfana配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">添加influxDB数据源并配置</span><br><span class="line">URL:         http://InfluxDB:8086</span><br><span class="line">Database:    cadvisor</span><br><span class="line">User:        root</span><br><span class="line">Passward：   root</span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\grafana配置01.png" style="zoom: 50%;" /><img src="D:\tianruo_x64\保存图片\grafana配置02.png" style="zoom:50%;" /><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile——dockerimage——dockercontainer</p><h3 id="dockerfile指令"><a href="#dockerfile指令" class="headerlink" title="dockerfile指令"></a>dockerfile指令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM        #指定基础镜像</span><br><span class="line">MAINTAINER  #镜像是谁写的，姓名+邮箱</span><br><span class="line">RUN         #镜像构建时需要运行的命令</span><br><span class="line">ADD         #添加环境需要的文件</span><br><span class="line">WORKDIR     #镜像的工作目录</span><br><span class="line">VOLUME      #挂载目录</span><br><span class="line">EXPOSE      #端口配置</span><br><span class="line">CMD         #指定容器启动时要运行的命令，只有最后一个生效，可被代替</span><br><span class="line">    CMD [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line">    docker run [name] ls -l</span><br><span class="line">ENTRYPOINT  #指定容器启动时要运行的命令，可以追加命令</span><br><span class="line">    ENTRYPOINT [&quot;ls&quot;,&quot;-a&quot;]</span><br><span class="line">    docker run [name] -l</span><br><span class="line">ONBUILD     #当构建一个被继承DockerFile时运行ONBUILD指令</span><br><span class="line">COPY        #类似ADD，将我们文件拷贝到镜像中</span><br><span class="line">ENV         #构建的时候设置环境变量</span><br></pre></td></tr></table></figure><h3 id="dockerfile-build"><a href="#dockerfile-build" class="headerlink" title="dockerfile build"></a>dockerfile build</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f [dockerfile文件路径] -t [镜像名:tag] .</span><br></pre></td></tr></table></figure><h2 id="发布镜像"><a href="#发布镜像" class="headerlink" title="发布镜像"></a>发布镜像</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login -u [用户名] -p[密码]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push [镜像名]</span><br></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p --name=&quot;容器名称&quot; [镜像名]</span><br><span class="line">进容器内安装iprout2和iputils-ping和net-tools</span><br><span class="line">apt update &amp;&amp; apt install -y iproute2</span><br><span class="line">apt install iputils-ping</span><br><span class="line">apt install net-tools</span><br><span class="line">docker exec -it 容器名称 ip addr</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker容器内查看网络信息</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">6: eth0@if7: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">虚机内查看网络信息</span><br><span class="line">7: veth6b5716f@if6: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default </span><br><span class="line">    link/ether 8e:0c:a1:21:80:2e brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet6 fe80::8c0c:a1ff:fe21:802e/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [已运行的容器名] ping [其他已运行容器的IP地址]</span><br></pre></td></tr></table></figure><h3 id="veth-pair"><a href="#veth-pair" class="headerlink" title="veth-pair"></a>veth-pair</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\vethpair.png" style="zoom:50%;" /><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [已运行的容器名] ping [其他已运行容器名]</span><br><span class="line">未经 --link 设置，是不能ping通的</span><br><span class="line">docker run -d -P --name=&quot;tomcat03&quot; --link tomcat02 tomcat</span><br><span class="line">配置完tomcat03能ping通tomcat02，但02不能ping通03</span><br></pre></td></tr></table></figure><h3 id="network"><a href="#network" class="headerlink" title="network"></a>network</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br><span class="line">docker network inspect [网络ID]</span><br><span class="line">docker network rm [容器ID]</span><br></pre></td></tr></table></figure><h3 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bridge：桥接</span><br><span class="line">none：不配置网络</span><br><span class="line">host：和宿主机共享网络</span><br><span class="line">container：容器网络连通</span><br></pre></td></tr></table></figure><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker0的局限：默认域名不能访问，--link可以配置</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker network create --driver bridge --subnet 192.167.0.0/16 --gatway 192.167.0.1 mynet</span><br><span class="line">设置自定义网络</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name tomcat-net-01 --net mynet  tomcat</span><br><span class="line">--net 设置容器的网络</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">自定义网络没有docker0的局限</span><br></pre></td></tr></table></figure><h3 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">处于网段1的容器接入网段2</span><br><span class="line">docker network connect mynet tomcat01</span><br><span class="line">设置完之后相当于一个容器两个IP</span><br></pre></td></tr></table></figure><h3 id="redis集群部署实战"><a href="#redis集群部署实战" class="headerlink" title="redis集群部署实战"></a>redis集群部署实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$(port)/conf</span><br><span class="line">touch /mydata/redis/node-$(port)/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$(port)/conf/redis.conf</span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">culster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$(port)</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">docker run -p 637$(port):6379 -p 1637$(port):16379 --name redis-$(port) \</span><br><span class="line">-v /mydata/redis/node-$(port)/data:/data \</span><br><span class="line">-v /mydata/redis/node-$(port)/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.1$(port) redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mydata/redis/node-6/conf</span><br><span class="line">touch /mydata/redis/node-6/conf/redis.conf</span><br><span class="line">vim /mydata/redis/node-6/conf/redis.conf</span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.16</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6376:6379 -p 16376:16379 --name redis-6 \</span><br><span class="line">-v /mydata/redis/node-6/data:/data \</span><br><span class="line">-v /mydata/redis/node-6/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.16 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">进入容器</span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-replicas 1</span><br><span class="line"></span><br><span class="line">redis-cli -c</span><br><span class="line"></span><br><span class="line">cluster nodes</span><br></pre></td></tr></table></figure><h2 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">定义、运行多个容器；</span><br><span class="line">YAML file 配置文件；</span><br><span class="line">命令；</span><br><span class="line">Dockerfile中定义app的运行环境，使它能在任何地方运行；</span><br><span class="line">docker-compose.yml中定义组成app的服务；</span><br><span class="line">docker-compose up启动项目；</span><br><span class="line"></span><br><span class="line">一个容器相当于一个服务；</span><br><span class="line">一组互相关联的容器组成一个项目，compose自动化管理这一组容器</span><br></pre></td></tr></table></figure><h3 id="compose和swarm区别"><a href="#compose和swarm区别" class="headerlink" title="compose和swarm区别"></a>compose和swarm区别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Docker Swarm 和 Docker Compose 一样，都是 Docker 官方容器编排项目，但不同的是：</span><br><span class="line">Docker Compose 是一个在单个服务器或主机上创建多个容器的工具</span><br><span class="line">Docker Swarm 则可以在多个服务器或主机上创建容器集群服务</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#下载</span><br><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line">#授权</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">#查看版本</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h3 id="试测"><a href="#试测" class="headerlink" title="试测"></a>试测</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.写应用程序：app.py</span><br><span class="line">2.写Dockerfile，把应用和环境打包成构建镜像文件</span><br><span class="line">3.写docker-compose.yml，定义整个服务</span><br><span class="line">4.启动compose项目，docker compose up</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在compose文件所在路径下</span><br><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><h3 id="yaml规则"><a href="#yaml规则" class="headerlink" title="yaml规则"></a>yaml规则</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://docs.docker.com/compose/compose-file/compose-file-v3/</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#版本，与docker版本对应</span><br><span class="line">version:&quot;&quot;</span><br><span class="line">#服务</span><br><span class="line">service：</span><br><span class="line">服务1：</span><br><span class="line">#服务配置</span><br><span class="line">images：</span><br><span class="line">container_name:</span><br><span class="line">ports:</span><br><span class="line">volumes:</span><br><span class="line">network：</span><br><span class="line">depends_on:</span><br><span class="line">environment:</span><br><span class="line">command:</span><br><span class="line">服务2：</span><br><span class="line">#服务配置</span><br><span class="line">服务3：</span><br><span class="line">#服务配置</span><br><span class="line">#其他配置</span><br><span class="line">volumes：</span><br><span class="line">networks：</span><br></pre></td></tr></table></figure><h2 id="Docker-swarm"><a href="#Docker-swarm" class="headerlink" title="Docker swarm"></a>Docker swarm</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swarm 集群管理和编排</span><br><span class="line">node 就是一个docker节点，多个节点组成一个集群</span><br><span class="line">service 任务，可以在管理节点或工作节点来运行</span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\swarm-diagram.png" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm --help</span><br></pre></td></tr></table></figure><img src="D:\tianruo_x64\保存图片\dockerswarm--help.png" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dcoker swarm init --help</span><br></pre></td></tr></table></figure><p><img src="D:\tianruo_x64\保存图片\dockerswarminit--help.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#创建集群</span><br><span class="line">docker swarm init --advertise-addr [IP]</span><br></pre></td></tr></table></figure><p><img src="D:\tianruo_x64\保存图片\dockerswarm创建集群.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#获取令牌</span><br><span class="line">docker swarm join-token manager</span><br><span class="line">docker swarm join-token worker</span><br><span class="line">在任意管理节点输入上方的命令，就能获取供其他节点使用的加入集群命令(manager：以管理节点加入；worker：以工作节点加入)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#集群节点查询</span><br><span class="line">docker node ls</span><br></pre></td></tr></table></figure><h3 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://thesecretlivesofdata.com/raft/</span><br></pre></td></tr></table></figure><h3 id="动态扩缩容"><a href="#动态扩缩容" class="headerlink" title="动态扩缩容"></a>动态扩缩容</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker service update --replicas [数量] [服务名]</span><br><span class="line">#数量小于当前服务数量时会终止多出的</span><br><span class="line">#加入集群的所有节点，没被分配到服务的节点也可以访问到其他节点的服务</span><br><span class="line">docker service scale [服务名]=[数量]</span><br><span class="line">docker service rm [服务名]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/27/hello-world/"/>
    <id>http://example.com/2023/01/27/hello-world/</id>
    <published>2023-01-27T05:01:22.874Z</published>
    <updated>2023-01-27T15:10:15.603Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
