<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-01-27T15:10:15.603Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/01/27/hello-world/"/>
    <id>http://example.com/2023/01/27/hello-world/</id>
    <published>2023-01-27T05:01:22.874Z</published>
    <updated>2023-01-27T15:10:15.603Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python+Docker实现人脸识别远程监控系统</title>
    <link href="http://example.com/2022/05/07/Python+Docker%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>http://example.com/2022/05/07/Python+Docker%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2023-01-28T06:25:17.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>​本项目包括服务端程序和客户端程序。服务端使用Python OpenCV库实现人脸识别功能，并将添加上识别结果的视频流通过TCP发送给客户端，且支持将上述功能程序封装为Docker容器；客户端程序通过IP+端口接入服务端，接收视频流，实时查看人脸识别结果。客户端可与服务端断开接入后重新连接，不影响服务端功能。</p><h2 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h2><blockquote><ul><li>tcpsend.py（服务端程序）</li><li>tcpreceive.py（客户端程序）</li><li>requirements.txt（项目依赖）</li><li>train.py（人脸识别模型训练程序）</li><li>trainer.yml（人脸识别模型）</li><li>haarcascade_frontalface_alt2.xml（分类器）</li><li>Dockerfile（构建Docker镜像所需文件）</li></ul></blockquote><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><h3 id="tcpsend-py"><a href="#tcpsend-py" class="headerlink" title="tcpsend.py"></a>tcpsend.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npip</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">address = (<span class="string">&#x27;ip&#x27;</span>, <span class="number">5555</span>)  <span class="comment"># 服务端地址和端口</span></span><br><span class="line">ser = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">ser.bind(address)</span><br><span class="line">ser.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 阻塞式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;waiting。。。&#x27;</span>)</span><br><span class="line">conn, addr = ser.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;建立连接...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;连接对象：&#x27;</span>, addr)</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># cap = cv2.VideoCapture(0)</span></span><br><span class="line">frames_num=cap.get(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;视频总帧数：&#x27;</span>,frames_num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;发送目标...&#x27;</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#加载训练数据集文件</span></span><br><span class="line">recogizer = cv2.face.LBPHFaceRecognizer_create()</span><br><span class="line">recogizer.read(<span class="string">&#x27;./trainer.yml&#x27;</span>)</span><br><span class="line">names = []</span><br><span class="line">warningtime = <span class="number">0</span></span><br><span class="line"><span class="comment">#准备识别的图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>(<span class="params">img</span>):</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  <span class="comment"># 转换为灰度</span></span><br><span class="line">    face_detector = cv2.CascadeClassifier(<span class="string">&#x27;./haarcascade_frontalface_alt2.xml&#x27;</span>)</span><br><span class="line">    face = face_detector.detectMultiScale(gray, <span class="number">1.1</span>, <span class="number">5</span>, cv2.CASCADE_SCALE_IMAGE, (<span class="number">100</span>, <span class="number">100</span>), (<span class="number">300</span>, <span class="number">300</span>))</span><br><span class="line">    <span class="comment"># face=face_detector.detectMultiScale(gray)</span></span><br><span class="line">    <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> face:</span><br><span class="line">        cv2.rectangle(img, (x, y), (x+w, y+h), color=(<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), thickness=<span class="number">2</span>)  <span class="comment"># blue,green,red</span></span><br><span class="line">        <span class="comment"># cv2.circle(img,center=(x+w//2,y+h//2),radius=w//2,color=(0,255,0),thickness=1)</span></span><br><span class="line">        <span class="comment"># 人脸识别</span></span><br><span class="line">        ids, confidence = recogizer.predict(gray[y:y + h, x:x + w])</span><br><span class="line">        <span class="comment"># print(&#x27;标签id:&#x27;,ids,&#x27;置信评分：&#x27;, confidence)</span></span><br><span class="line">        <span class="keyword">if</span> confidence &gt; <span class="number">80</span>:</span><br><span class="line">            cv2.putText(img, <span class="string">&#x27;unkonw&#x27;</span>, (x + <span class="number">10</span>, y - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, (<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv2.putText(img, <span class="string">&#x27;dong&#x27;</span>, (x + <span class="number">10</span>, y - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, (<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;result&#x27;, img)</span></span><br><span class="line">    <span class="comment"># print(&#x27;bug:&#x27;,ids)</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>():</span><br><span class="line">    path = <span class="string">&#x27;./dataset/&#x27;</span></span><br><span class="line">    <span class="comment">#  names = []</span></span><br><span class="line">    imagePaths = [os.path.join(path, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line">       name = <span class="built_in">str</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>, <span class="number">2</span>)[<span class="number">1</span>])</span><br><span class="line">       names.append(name)</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#name()</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    flag, frame = cap.read()</span><br><span class="line">    frame = face_detect_demo(frame)</span><br><span class="line">    <span class="comment"># frame = cv2.resize(frame, (1280, 720))</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;send&#x27;, frame)</span></span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 数据打包有很多方式，也可以用json打包</span></span><br><span class="line">    img_encode = cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, frame)[<span class="number">1</span>]</span><br><span class="line">    data_encode = np.array(img_encode)</span><br><span class="line">    str_encode = data_encode.tostring()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.sendall(str_encode)</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        conn, addr = ser.accept()</span><br></pre></td></tr></table></figure><h3 id="tcpreceive-py"><a href="#tcpreceive-py" class="headerlink" title="tcpreceive.py"></a>tcpreceive.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">address = (<span class="string">&#x27;ip&#x27;</span>, <span class="number">5555</span>)  <span class="comment"># 服务端地址和端口</span></span><br><span class="line">cli = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cli.connect(address)  <span class="comment"># 尝试连接服务端</span></span><br><span class="line"><span class="keyword">except</span> Exception:ip</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[!] Server not found or not open&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">frame_count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time1 = time.time() <span class="keyword">if</span> frame_count == <span class="number">1</span> <span class="keyword">else</span> time1</span><br><span class="line">    trigger = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    cli.sendall(trigger.encode())</span><br><span class="line">    data = cli.recv(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">20</span>)</span><br><span class="line">    image = np.frombuffer(data, np.uint8)</span><br><span class="line">    image = cv2.imdecode(image, cv2.IMREAD_COLOR)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;video&#x27;</span>, image)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    time2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(image.shape[:<span class="number">2</span>], <span class="built_in">int</span>(frame_count / (time2 - time1)))</span><br><span class="line">    frame_count += <span class="number">1</span></span><br><span class="line">cli.close()</span><br></pre></td></tr></table></figure><h3 id="train-py"><a href="#train-py" class="headerlink" title="train.py"></a>train.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImageAndLabels</span>(<span class="params">path</span>):</span><br><span class="line">    facesSamples = []  <span class="comment"># 储存人脸数据</span></span><br><span class="line">    ids = []  <span class="comment"># 尺寸姓名数据</span></span><br><span class="line">    imagePaths = [os.path.join(path, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]  <span class="comment"># 储存图片信息</span></span><br><span class="line">    face_detector = cv.CascadeClassifier(<span class="string">&#x27;D:/Python/python3.9.8/Lib/site-packages/cv2/data/haarcascade_frontalface_alt2.xml&#x27;</span>)  <span class="comment"># 加载分类器</span></span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:  <span class="comment"># 遍历列表中的图片</span></span><br><span class="line">        PIL_img = Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&#x27;L&#x27;</span>)  <span class="comment"># 打开图片，灰度化(PIL有九种模式：1,L,P,RGB,RGBA,CMYK,YCbCr,YCbCr,I,F)</span></span><br><span class="line">        img_numpy = np.array(PIL_img, <span class="string">&#x27;uint8&#x27;</span>)  <span class="comment"># 将图片转换为数组，以黑白深浅</span></span><br><span class="line">        faces = face_detector.detectMultiScale(img_numpy)  <span class="comment"># 获取图片人脸特征</span></span><br><span class="line">        <span class="built_in">id</span> = <span class="built_in">int</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])  <span class="comment"># 获取每张图片的id和姓名</span></span><br><span class="line">        <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> faces:</span><br><span class="line">            ids.append(<span class="built_in">id</span>)</span><br><span class="line">            facesSamples.append(img_numpy[y:y+h, x:x+w])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fs:&#x27;</span>, facesSamples)</span><br><span class="line">    <span class="keyword">return</span> facesSamples, ids</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;./dataset/&#x27;</span>  <span class="comment"># 图片路径</span></span><br><span class="line">    faces, ids = getImageAndLabels(path)  <span class="comment"># 获取图像数组和id标签数据和姓名</span></span><br><span class="line">    recognizer = cv.face.LBPHFaceRecognizer_create()  <span class="comment"># 加载识别器</span></span><br><span class="line">    recognizer.train(faces, np.array(ids))  <span class="comment"># 训练</span></span><br><span class="line">    recognizer.write(<span class="string">&#x27;./trainer/trainer.yml&#x27;</span>)  <span class="comment"># 保存文件</span></span><br></pre></td></tr></table></figure><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numpy==1.21.5</span><br><span class="line">Pillow==9.1.0</span><br><span class="line">opencv-contrib-python==4.5.5.64</span><br><span class="line">opencv-python==4.5.5.64</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./facerecognitionserver /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y libgl1-mesa-glx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y libglib2.0-dev</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;/code/tcpsend.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;​		本项目包括服务端程序和客户端程序。服务端使用Python OpenCV库实现人脸识别功能，并将添加上识别结果的视频流通过TCP发送给客</summary>
      
    
    
    
    
  </entry>
  
</feed>
