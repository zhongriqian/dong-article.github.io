<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://zhongriqian.github.io/atom.xml" rel="self"/>
  
  <link href="http://zhongriqian.github.io/"/>
  <updated>2023-03-01T13:16:53.810Z</updated>
  <id>http://zhongriqian.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EtherCAT_DC同步程序实现思路及接口函数介绍</title>
    <link href="http://zhongriqian.github.io/2023/02/27/EtherCAT-DC%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF%E5%8F%8A%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>http://zhongriqian.github.io/2023/02/27/EtherCAT-DC%E5%90%8C%E6%AD%A5%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF%E5%8F%8A%E6%8E%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D/</id>
    <published>2023-02-26T16:00:00.000Z</published>
    <updated>2023-03-01T13:16:53.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="从站作为参考时钟"><a href="#从站作为参考时钟" class="headerlink" title="从站作为参考时钟"></a>从站作为参考时钟</h2><ol><li><p>激活从站的DC功能。</p><blockquote><p>使用<strong>ecrt_slave_config_dc</strong>(ec_slave_config_t *sc, uint16_t assign_activate, uint32_t sync0_cycle, int32_t sync0_shift, uint32_t sync1_cycle, int32_t sync1_shift)</p></blockquote></li><li><p>指定一个从站作为参考时钟，一般选用接入主站拓扑中的第一个带有DC功能的从站</p><blockquote><p>使用<strong>ecrt_master_select_reference_clock</strong>(ec_master_t *master, ec_slave_config_t *sc)</p></blockquote></li><li><p>在每个通信周期里，将主站时钟、其他从站的时钟同步到参考时钟</p><ol><li><p>在每个周期，主站首先获取本地时钟</p><blockquote><p>使用<strong>ecrt_master_application_time</strong>(ec_master_t *master,  uint64_t app_time)</p></blockquote></li><li><p>然后获取参考时钟，并同步到参考时钟</p><blockquote><p>使用<strong>ecrt_master_reference_clock_time</strong>(ec_master_t *master,  uint32_t *time)</p></blockquote></li><li><p>最后将参考时钟发送给其他从站，使其他从站同步到参考时钟</p><blockquote><p>使用<strong>ecrt_master_sync_slave_clocks</strong>(ec_master_t *master)</p></blockquote></li></ol></li></ol><h2 id="主站作为参考时钟"><a href="#主站作为参考时钟" class="headerlink" title="主站作为参考时钟"></a>主站作为参考时钟</h2><ol><li><p>激活从站DC功能</p><blockquote><p>使用<strong>ecrt_slave_config_dc</strong>(ec_slave_config_t *sc, uint16_t assign_activate, uint32_t sync0_cycle, int32_t sync0_shift, uint32_t sync1_cycle, int32_t sync1_shift)</p></blockquote></li><li><p>将第一个带DC功能的从站设置为参考时钟</p><blockquote><p>使用<strong>ecrt_master_select_reference_clock</strong>(ec_master_t *master, ec_slave_config_t *sc)</p></blockquote></li><li><p>每个周期里，将第一个从站的时钟改为主站的时钟（即修改参考时钟，改为主站时钟的值），并将改后的从站时钟发送给其他从站</p><ol><li><p>主站首先获取本地时钟</p><blockquote><p>使用<strong>ecrt_master_application_time</strong>(ec_master_t *master,  uint64_t app_time)</p></blockquote></li><li><p>修改参考时钟，改为主站时钟的值</p><blockquote><p>使用<strong>ecrt_master_sync_reference_clock_to</strong>(ec_master_t *master, uint64_t sync_time)</p><p>或<strong>ecrt_master_sync_reference_clock</strong>(ec_master_t *master)</p></blockquote></li><li><p>将参考时钟（改后的第一个从站时钟）发送给其他从站，使其他从站同步到参考时钟</p><blockquote><p>使用<strong>ecrt_master_sync_slave_clocks</strong>(ec_master_t *master)</p></blockquote></li></ol></li></ol><h1 id="接口函数"><a href="#接口函数" class="headerlink" title="接口函数"></a>接口函数</h1><h2 id="ecrt-slave-config-dc"><a href="#ecrt-slave-config-dc" class="headerlink" title="ecrt_slave_config_dc"></a>ecrt_slave_config_dc</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Configure distributed clocks.</span></span><br><span class="line"><span class="comment"> *  配置分布式时钟（DC）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Sets the AssignActivate word and the cycle and shift times for the sync</span></span><br><span class="line"><span class="comment"> * signals.</span></span><br><span class="line"><span class="comment"> * 设置激活字以及同步信号的周期和偏移时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The AssignActivate word is vendor-specific and can be taken from the XML</span></span><br><span class="line"><span class="comment"> * device description file (Device -&gt; Dc -&gt; AssignActivate). Set this to zero,</span></span><br><span class="line"><span class="comment"> * if the slave shall be operated without distributed clocks (default).</span></span><br><span class="line"><span class="comment"> * 激活字是厂商指定的，可以在ESI(Device -&gt; Dc -&gt; AssignActivate)中查询。</span></span><br><span class="line"><span class="comment"> * 激活字是用于设置从站的0x980和0x981寄存器中的值，这两个寄存器正是同步信号控制器相关的寄存器。</span></span><br><span class="line"><span class="comment"> * 大多数厂商的激活字都设置为0x0300，根据两个寄存器中每一位的置位功能分析出，设置0x0300功能为激活SYNC0信号。</span></span><br><span class="line"><span class="comment"> * （0x0500为激活SYNC1信号，0x0700为激活SYNC0和SYNC1信号）</span></span><br><span class="line"><span class="comment"> * 后四个参数用于设置SYNC0和SYNC1信号的周期和偏移时间，单位纳秒。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method has to be called in non-realtime context before</span></span><br><span class="line"><span class="comment"> * ecrt_master_activate().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \attention The \a sync1_shift time is ignored.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ecrt_slave_config_dc</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">ec_slave_config_t</span> *sc, <span class="comment">/**&lt; Slave configuration. */</span></span></span><br><span class="line"><span class="params">        <span class="type">uint16_t</span> assign_activate, <span class="comment">/**&lt; AssignActivate word. */</span></span></span><br><span class="line"><span class="params">        <span class="type">uint32_t</span> sync0_cycle, <span class="comment">/**&lt; SYNC0 cycle time [ns]. */</span></span></span><br><span class="line"><span class="params">        <span class="type">int32_t</span> sync0_shift, <span class="comment">/**&lt; SYNC0 shift time [ns]. */</span></span></span><br><span class="line"><span class="params">        <span class="type">uint32_t</span> sync1_cycle, <span class="comment">/**&lt; SYNC1 cycle time [ns]. */</span></span></span><br><span class="line"><span class="params">        <span class="type">int32_t</span> sync1_shift <span class="comment">/**&lt; SYNC1 shift time [ns]. */</span></span></span><br><span class="line"><span class="params">        )</span>;</span><br></pre></td></tr></table></figure><h2 id="ecrt-master-select-reference-clock"><a href="#ecrt-master-select-reference-clock" class="headerlink" title="ecrt_master_select_reference_clock"></a>ecrt_master_select_reference_clock</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Selects the reference clock for distributed clocks.</span></span><br><span class="line"><span class="comment"> *  为分布式时钟选择参考时钟</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * If this method is not called for a certain master, or if the slave</span></span><br><span class="line"><span class="comment"> * configuration pointer is NULL, then the first slave with DC functionality</span></span><br><span class="line"><span class="comment"> * will provide the reference clock.</span></span><br><span class="line"><span class="comment"> * 如果此方法没有被主站调用，或从站指针为NULL，则默认选择第一个具有DC功能的从站提供参考时钟</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \return 0 on success, otherwise negative error code.</span></span><br><span class="line"><span class="comment"> * 返回0为成功，失败则返回负数错误代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ecrt_master_select_reference_clock</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">ec_master_t</span> *master, <span class="comment">/**&lt; EtherCAT master. EtherCAT主站*/</span></span></span><br><span class="line"><span class="params">        <span class="type">ec_slave_config_t</span> *sc <span class="comment">/**&lt; Slave config of the slave to use as the</span></span></span><br><span class="line"><span class="comment"><span class="params">                               * reference slave (or NULL). 作为参考时钟的从站*/</span></span></span><br><span class="line"><span class="params">        )</span>;</span><br></pre></td></tr></table></figure><h2 id="ecrt-master-application-time"><a href="#ecrt-master-application-time" class="headerlink" title="ecrt_master_application_time"></a>ecrt_master_application_time</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Sets the application time.设置应用时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The master has to know the application&#x27;s time when operating slaves with</span></span><br><span class="line"><span class="comment"> * distributed clocks. The time is not incremented by the master itself, so</span></span><br><span class="line"><span class="comment"> * this method has to be called cyclically.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \attention The time passed to this method is used to calculate the phase of</span></span><br><span class="line"><span class="comment"> * the slaves&#x27; SYNC0/1 interrupts. It should be called constantly at the same</span></span><br><span class="line"><span class="comment"> * point of the realtime cycle. So it is recommended to call it at the start</span></span><br><span class="line"><span class="comment"> * of the calculations to avoid deviancies due to changing execution times.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The time is used when setting the slaves&#x27; &lt;tt&gt;System Time Offset&lt;/tt&gt; and</span></span><br><span class="line"><span class="comment"> * &lt;tt&gt;Cyclic Operation Start Time&lt;/tt&gt; registers and when synchronizing the</span></span><br><span class="line"><span class="comment"> * DC reference clock to the application time via</span></span><br><span class="line"><span class="comment"> * ecrt_master_sync_reference_clock().</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The time is defined as nanoseconds from 2000-01-01 00:00. Converting an</span></span><br><span class="line"><span class="comment"> * epoch time can be done with the EC_TIMEVAL2NANO() macro, but is not</span></span><br><span class="line"><span class="comment"> * necessary, since the absolute value is not of any interest.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ecrt_master_application_time</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">ec_master_t</span> *master, <span class="comment">/**&lt; EtherCAT master. */</span>c</span></span><br><span class="line"><span class="params">        <span class="type">uint64_t</span> app_time <span class="comment">/**&lt; Application time. */</span></span></span><br><span class="line"><span class="params">        )</span>;</span><br></pre></td></tr></table></figure><h2 id="ecrt-master-reference-clock-time"><a href="#ecrt-master-reference-clock-time" class="headerlink" title="ecrt_master_reference_clock_time"></a>ecrt_master_reference_clock_time</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Get the lower 32 bit of the reference clock system time.</span></span><br><span class="line"><span class="comment"> *  获取参考时钟的低32位</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method can be used to synchronize the master to the reference clock.</span></span><br><span class="line"><span class="comment"> * 可以用于将主站时钟同步到参考时钟</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The reference clock system time is queried via the</span></span><br><span class="line"><span class="comment"> * ecrt_master_sync_slave_clocks() method, that reads the system time of the</span></span><br><span class="line"><span class="comment"> * reference clock and writes it to the slave clocks (so be sure to call it</span></span><br><span class="line"><span class="comment"> * cyclically to get valid data).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \attention The returned time is the system time of the reference clock</span></span><br><span class="line"><span class="comment"> * minus the transmission delay of the reference clock.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \retval 0 success, system time was written into \a time.</span></span><br><span class="line"><span class="comment"> * \retval -ENXIO No reference clock found.</span></span><br><span class="line"><span class="comment"> * \retval -EIO Slave synchronization datagram was not received.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ecrt_master_reference_clock_time</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">ec_master_t</span> *master, <span class="comment">/**&lt; EtherCAT master. */</span></span></span><br><span class="line"><span class="params">        <span class="type">uint32_t</span> *time <span class="comment">/**&lt; Pointer to store the queried system time. */</span></span></span><br><span class="line"><span class="params">        )</span>;</span><br></pre></td></tr></table></figure><h2 id="ecrt-master-sync-slave-clocks"><a href="#ecrt-master-sync-slave-clocks" class="headerlink" title="ecrt_master_sync_slave_clocks"></a>ecrt_master_sync_slave_clocks</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Queues the DC clock drift compensation datagram for sending.</span></span><br><span class="line"><span class="comment"> *  将DC漂移补偿数据报排队发送</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * All slave clocks synchronized to the reference clock.</span></span><br><span class="line"><span class="comment"> * 使所有从站时钟同步到参考时钟</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ecrt_master_sync_slave_clocks</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">ec_master_t</span> *master <span class="comment">/**&lt; EtherCAT master. */</span></span></span><br><span class="line"><span class="params">        )</span>;</span><br></pre></td></tr></table></figure><h2 id="ecrt-master-sync-reference-clock-to"><a href="#ecrt-master-sync-reference-clock-to" class="headerlink" title="ecrt_master_sync_reference_clock_to"></a>ecrt_master_sync_reference_clock_to</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Queues the DC reference clock drift compensation datagram for sending.</span></span><br><span class="line"><span class="comment"> *  将DC参考时钟漂移补偿数据报排队发送。</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * The reference clock will by synchronized to the time passed in the</span></span><br><span class="line"><span class="comment"> * sync_time parameter.</span></span><br><span class="line"><span class="comment"> * 参考时钟会被同步到第二个参数的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ecrt_master_sync_reference_clock_to</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">ec_master_t</span> *master, <span class="comment">/**&lt; EtherCAT master. */</span></span></span><br><span class="line"><span class="params">        <span class="type">uint64_t</span> sync_time <span class="comment">/**&lt; Sync reference clock to this time. */</span></span></span><br><span class="line"><span class="params">        )</span>;</span><br></pre></td></tr></table></figure><h2 id="ecrt-master-sync-reference-clock"><a href="#ecrt-master-sync-reference-clock" class="headerlink" title="ecrt_master_sync_reference_clock"></a>ecrt_master_sync_reference_clock</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Queues the DC reference clock drift compensation datagram for sending.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The reference clock will by synchronized to the application time provided</span></span><br><span class="line"><span class="comment"> * by the last call off ecrt_master_application_time().</span></span><br><span class="line"><span class="comment"> * 与上一个函数功能类似，区别是不需要指定时间值，自动选择ecrt_master_application_time()获取的值。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ecrt_master_sync_reference_clock</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="type">ec_master_t</span> *master <span class="comment">/**&lt; EtherCAT master. */</span></span></span><br><span class="line"><span class="params">        )</span>;</span><br></pre></td></tr></table></figure><h1 id="程序示例"><a href="#程序示例" class="headerlink" title="程序示例"></a>程序示例</h1><h2 id="从站作为参考时钟-1"><a href="#从站作为参考时钟-1" class="headerlink" title="从站作为参考时钟"></a>从站作为参考时钟</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ecrt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">// ethercat</span></span><br><span class="line"><span class="type">static</span> <span class="type">ec_master_t</span> *master = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">ec_domain_t</span> *domain1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">ec_slave_config_t</span> *slave0 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">ec_slave_config_t</span> *slave1 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">// application parameters</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLOCK_TO_USECLOCK_MONOTONIC </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cycle_t 10000000 <span class="comment">/*本次设置周期PERIOD_NS为10ms*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NSEC_PER_SEC (1000000000L) </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TIMESPEC2NS(T) ((uint64_t) (T).tv_sec * NSEC_PER_SEC + (T).tv_nsec)</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">cycletime</span> =</span> &#123;<span class="number">0</span>, <span class="type">cycle_t</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">wakeupTime</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> cycle_times = <span class="number">0</span>;  <span class="comment">// 循环次数</span></span><br><span class="line"><span class="type">int</span> LED[<span class="number">8</span>] = &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> led = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">// process data</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PANASONIC_0        0,0                        <span class="comment">/*EtherCAT address on the bus*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PANASONIC_1        0,1                        <span class="comment">/*EtherCAT address on the bus*/</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VID_PID          0x00000009, 0x00009252   <span class="comment">/*Vendor ID, product code*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> *domain1_pd = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_01;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_01_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_02;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_02_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_03;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_03_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_04;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_04_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_05;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_05_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_06;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_06_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_07;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_07_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_08;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_6000_08_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_01;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_01_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_02;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_02_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_03;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_03_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_04;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_04_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_05;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_05_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_06;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_06_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_07;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_07_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_08;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave0_7010_08_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_01;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_01_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_02;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_02_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_03;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_03_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_04;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_04_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_05;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_05_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_06;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_06_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_07;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_07_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_08;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_6000_08_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_01;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_01_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_02;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_02_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_03;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_03_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_04;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_04_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_05;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_05_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_06;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_06_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_07;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_07_bit;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_08;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> slave1_7010_08_bit;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">static</span> <span class="type">ec_pdo_entry_reg_t</span> domain1_regs[] = &#123;</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">1</span>, &amp;slave0_6000_01, &amp;slave0_6000_01_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">2</span>, &amp;slave0_6000_02, &amp;slave0_6000_02_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">3</span>, &amp;slave0_6000_03, &amp;slave0_6000_03_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">4</span>, &amp;slave0_6000_04, &amp;slave0_6000_04_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">5</span>, &amp;slave0_6000_05, &amp;slave0_6000_05_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">6</span>, &amp;slave0_6000_06, &amp;slave0_6000_06_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">7</span>, &amp;slave0_6000_07, &amp;slave0_6000_07_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x6000</span>, <span class="number">8</span>, &amp;slave0_6000_08, &amp;slave0_6000_08_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">1</span>, &amp;slave0_7010_01, &amp;slave0_7010_01_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">2</span>, &amp;slave0_7010_02, &amp;slave0_7010_02_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">3</span>, &amp;slave0_7010_03, &amp;slave0_7010_03_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">4</span>, &amp;slave0_7010_04, &amp;slave0_7010_04_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">5</span>, &amp;slave0_7010_05, &amp;slave0_7010_05_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">6</span>, &amp;slave0_7010_06, &amp;slave0_7010_06_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">7</span>, &amp;slave0_7010_07, &amp;slave0_7010_07_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_0, VID_PID, <span class="number">0x7010</span>, <span class="number">8</span>, &amp;slave0_7010_08, &amp;slave0_7010_08_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">1</span>, &amp;slave1_6000_01, &amp;slave1_6000_01_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">2</span>, &amp;slave1_6000_02, &amp;slave1_6000_02_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">3</span>, &amp;slave1_6000_03, &amp;slave1_6000_03_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">4</span>, &amp;slave1_6000_04, &amp;slave1_6000_04_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">5</span>, &amp;slave1_6000_05, &amp;slave1_6000_05_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">6</span>, &amp;slave1_6000_06, &amp;slave1_6000_06_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">7</span>, &amp;slave1_6000_07, &amp;slave1_6000_07_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x6000</span>, <span class="number">8</span>, &amp;slave1_6000_08, &amp;slave1_6000_08_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">1</span>, &amp;slave1_7010_01, &amp;slave1_7010_01_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">2</span>, &amp;slave1_7010_02, &amp;slave1_7010_02_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">3</span>, &amp;slave1_7010_03, &amp;slave1_7010_03_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">4</span>, &amp;slave1_7010_04, &amp;slave1_7010_04_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">5</span>, &amp;slave1_7010_05, &amp;slave1_7010_05_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">6</span>, &amp;slave1_7010_06, &amp;slave1_7010_06_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">7</span>, &amp;slave1_7010_07, &amp;slave1_7010_07_bit&#125;,</span><br><span class="line">    &#123;PANASONIC_1, VID_PID, <span class="number">0x7010</span>, <span class="number">8</span>, &amp;slave1_7010_08, &amp;slave1_7010_08_bit&#125;,</span><br><span class="line">    &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">/* Slave 0, &quot;LAN9252-EVB-HBI&quot;</span></span><br><span class="line"><span class="comment"> * Vendor ID:       0x00000009</span></span><br><span class="line"><span class="comment"> * Product code:    0x00009252</span></span><br><span class="line"><span class="comment"> * Revision number: 0x00000001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">ec_pdo_entry_info_t</span> slave_0_pdo_entries[] = &#123;</span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x01</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 1 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x02</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 2 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x03</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 3 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x04</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 4 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x05</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 5 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x06</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 6 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x07</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 7 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x08</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 8 */</span></span><br><span class="line">    &#123;<span class="number">0x0000</span>, <span class="number">0x00</span>, <span class="number">8</span>&#125;, <span class="comment">/* None */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x01</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 1 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x02</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 2 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x03</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 3 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x04</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 4 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x05</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 5 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x06</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 6 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x07</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 7 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x08</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 8 */</span></span><br><span class="line">    &#123;<span class="number">0x0000</span>, <span class="number">0x00</span>, <span class="number">8</span>&#125;, <span class="comment">/* None */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x01</span>, <span class="number">1</span>&#125;, <span class="comment">/* Underrange */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x02</span>, <span class="number">1</span>&#125;, <span class="comment">/* Overrange */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x03</span>, <span class="number">2</span>&#125;, <span class="comment">/* Limit 1 */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x05</span>, <span class="number">2</span>&#125;, <span class="comment">/* Limit 2 */</span></span><br><span class="line">    &#123;<span class="number">0x0000</span>, <span class="number">0x00</span>, <span class="number">8</span>&#125;, <span class="comment">/* Gap */</span></span><br><span class="line">    &#123;<span class="number">0x1802</span>, <span class="number">0x07</span>, <span class="number">1</span>&#125;, <span class="comment">/* TxPDOState */</span></span><br><span class="line">    &#123;<span class="number">0x1802</span>, <span class="number">0x09</span>, <span class="number">1</span>&#125;, <span class="comment">/* TxPDO Toggle */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x11</span>, <span class="number">16</span>&#125;, <span class="comment">/* Analog input */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ec_pdo_info_t</span> slave_0_pdos[] = &#123;</span><br><span class="line">    &#123;<span class="number">0x1601</span>, <span class="number">9</span>, slave_0_pdo_entries + <span class="number">0</span>&#125;, <span class="comment">/* DO Outputs */</span></span><br><span class="line">    &#123;<span class="number">0x1a00</span>, <span class="number">9</span>, slave_0_pdo_entries + <span class="number">9</span>&#125;, <span class="comment">/* DI Inputs */</span></span><br><span class="line">    &#123;<span class="number">0x1a02</span>, <span class="number">8</span>, slave_0_pdo_entries + <span class="number">18</span>&#125;, <span class="comment">/* AI TxPDO-Map */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ec_sync_info_t</span> slave_0_syncs[] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, EC_DIR_OUTPUT, <span class="number">0</span>, <span class="literal">NULL</span>, EC_WD_DISABLE&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, EC_DIR_INPUT, <span class="number">0</span>, <span class="literal">NULL</span>, EC_WD_DISABLE&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, EC_DIR_OUTPUT, <span class="number">1</span>, slave_0_pdos + <span class="number">0</span>, EC_WD_ENABLE&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, EC_DIR_INPUT, <span class="number">2</span>, slave_0_pdos + <span class="number">1</span>, EC_WD_DISABLE&#125;,</span><br><span class="line">    &#123;<span class="number">0xff</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Slave 1, &quot;LAN9252-EVB-HBI&quot;</span></span><br><span class="line"><span class="comment"> * Vendor ID:       0x00000009</span></span><br><span class="line"><span class="comment"> * Product code:    0x00009252</span></span><br><span class="line"><span class="comment"> * Revision number: 0x00000001</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">ec_pdo_entry_info_t</span> slave_1_pdo_entries[] = &#123;</span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x01</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 1 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x02</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 2 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x03</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 3 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x04</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 4 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x05</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 5 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x06</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 6 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x07</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 7 */</span></span><br><span class="line">    &#123;<span class="number">0x7010</span>, <span class="number">0x08</span>, <span class="number">1</span>&#125;, <span class="comment">/* LED 8 */</span></span><br><span class="line">    &#123;<span class="number">0x0000</span>, <span class="number">0x00</span>, <span class="number">8</span>&#125;, <span class="comment">/* None */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x01</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 1 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x02</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 2 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x03</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 3 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x04</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 4 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x05</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 5 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x06</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 6 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x07</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 7 */</span></span><br><span class="line">    &#123;<span class="number">0x6000</span>, <span class="number">0x08</span>, <span class="number">1</span>&#125;, <span class="comment">/* Switch 8 */</span></span><br><span class="line">    &#123;<span class="number">0x0000</span>, <span class="number">0x00</span>, <span class="number">8</span>&#125;, <span class="comment">/* None */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x01</span>, <span class="number">1</span>&#125;, <span class="comment">/* Underrange */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x02</span>, <span class="number">1</span>&#125;, <span class="comment">/* Overrange */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x03</span>, <span class="number">2</span>&#125;, <span class="comment">/* Limit 1 */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x05</span>, <span class="number">2</span>&#125;, <span class="comment">/* Limit 2 */</span></span><br><span class="line">    &#123;<span class="number">0x0000</span>, <span class="number">0x00</span>, <span class="number">8</span>&#125;, <span class="comment">/* Gap */</span></span><br><span class="line">    &#123;<span class="number">0x1802</span>, <span class="number">0x07</span>, <span class="number">1</span>&#125;, <span class="comment">/* TxPDOState */</span></span><br><span class="line">    &#123;<span class="number">0x1802</span>, <span class="number">0x09</span>, <span class="number">1</span>&#125;, <span class="comment">/* TxPDO Toggle */</span></span><br><span class="line">    &#123;<span class="number">0x6020</span>, <span class="number">0x11</span>, <span class="number">16</span>&#125;, <span class="comment">/* Analog input */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ec_pdo_info_t</span> slave_1_pdos[] = &#123;</span><br><span class="line">    &#123;<span class="number">0x1601</span>, <span class="number">9</span>, slave_1_pdo_entries + <span class="number">0</span>&#125;, <span class="comment">/* DO Outputs */</span></span><br><span class="line">    &#123;<span class="number">0x1a00</span>, <span class="number">9</span>, slave_1_pdo_entries + <span class="number">9</span>&#125;, <span class="comment">/* DI Inputs */</span></span><br><span class="line">    &#123;<span class="number">0x1a02</span>, <span class="number">8</span>, slave_0_pdo_entries + <span class="number">18</span>&#125;, <span class="comment">/* AI TxPDO-Map */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ec_sync_info_t</span> slave_1_syncs[] = &#123;</span><br><span class="line">    &#123;<span class="number">0</span>, EC_DIR_OUTPUT, <span class="number">0</span>, <span class="literal">NULL</span>, EC_WD_DISABLE&#125;,</span><br><span class="line">    &#123;<span class="number">1</span>, EC_DIR_INPUT, <span class="number">0</span>, <span class="literal">NULL</span>, EC_WD_DISABLE&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>, EC_DIR_OUTPUT, <span class="number">1</span>, slave_0_pdos + <span class="number">0</span>, EC_WD_ENABLE&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>, EC_DIR_INPUT, <span class="number">2</span>, slave_0_pdos + <span class="number">1</span>, EC_WD_DISABLE&#125;,</span><br><span class="line">    &#123;<span class="number">0xff</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">// Synchronise the distributed clocks</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sync_distributed_clocks</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint32_t</span> ref_time = <span class="number">0</span>;</span><br><span class="line">ecrt_master_reference_clock_time(master, &amp;ref_time);<span class="comment">//获取参考时钟的低32位</span></span><br><span class="line"></span><br><span class="line">ecrt_master_sync_slave_clocks(master);<span class="comment">// call to sync slaves to ref slave</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">// timespec相加</span></span><br><span class="line"><span class="keyword">struct</span> timespec <span class="title function_">timespec_add</span><span class="params">(<span class="keyword">struct</span> timespec time1, <span class="keyword">struct</span> timespec time2)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timespec</span> <span class="title">result</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((time1.tv_nsec + time2.tv_nsec) &gt;= NSEC_PER_SEC) &#123;</span><br><span class="line">        result.tv_sec = time1.tv_sec + time2.tv_sec + <span class="number">1</span>;</span><br><span class="line">        result.tv_nsec = time1.tv_nsec + time2.tv_nsec - NSEC_PER_SEC;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.tv_sec = time1.tv_sec + time2.tv_sec;</span><br><span class="line">        result.tv_nsec = time1.tv_nsec + time2.tv_nsec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">// Wait for the next period</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait_period</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">clock_nanosleep(CLOCK_TO_USE, TIMER_ABSTIME, &amp;wakeupTime, <span class="literal">NULL</span>);</span><br><span class="line">ecrt_master_application_time(master, TIMESPEC2NS(wakeupTime));</span><br><span class="line">wakeupTime = timespec_add(wakeupTime, cycletime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*****************************************************************************/</span></span><br><span class="line"><span class="comment">// 循环任务</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">cyclic_task</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// wait for next period (using adjustable system time)</span></span><br><span class="line">    wait_period();</span><br><span class="line"><span class="comment">// receive EtherCAT</span></span><br><span class="line">ecrt_master_receive(master);</span><br><span class="line">ecrt_domain_process(domain1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 流水灯逻辑</span></span><br><span class="line"><span class="keyword">if</span>(cycle_times &lt; <span class="number">50</span>)&#123;  <span class="comment">// 每500ms切换一次</span></span><br><span class="line">cycle_times++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cycle_times = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span>&lt;led &amp;&amp; led&lt;<span class="number">7</span>)&#123;</span><br><span class="line">LED[led<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">LED[led] = <span class="number">0</span>;</span><br><span class="line">led++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(led==<span class="number">7</span>)&#123;</span><br><span class="line">LED[led<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">LED[led] = <span class="number">0</span>;</span><br><span class="line">led=<span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(led==<span class="number">0</span>)&#123;</span><br><span class="line">LED[<span class="number">7</span>]=<span class="number">1</span>;</span><br><span class="line">LED[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">led=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// write slave0</span></span><br><span class="line">EC_WRITE_BIT(domain1_pd + slave0_7010_01, slave0_7010_01_bit, LED[<span class="number">0</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave0_7010_02, slave0_7010_02_bit, LED[<span class="number">1</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave0_7010_03, slave0_7010_03_bit, LED[<span class="number">2</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave0_7010_04, slave0_7010_04_bit, LED[<span class="number">3</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave0_7010_05, slave0_7010_05_bit, LED[<span class="number">4</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave0_7010_06, slave0_7010_06_bit, LED[<span class="number">5</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave0_7010_07, slave0_7010_07_bit, LED[<span class="number">6</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave0_7010_08, slave0_7010_08_bit, LED[<span class="number">7</span>]);</span><br><span class="line"><span class="comment">// write slave1</span></span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_01, slave1_7010_01_bit, LED[<span class="number">0</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_02, slave1_7010_02_bit, LED[<span class="number">1</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_03, slave1_7010_03_bit, LED[<span class="number">2</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_04, slave1_7010_04_bit, LED[<span class="number">3</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_05, slave1_7010_05_bit, LED[<span class="number">4</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_06, slave1_7010_06_bit, LED[<span class="number">5</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_07, slave1_7010_07_bit, LED[<span class="number">6</span>]);</span><br><span class="line">    EC_WRITE_BIT(domain1_pd + slave1_7010_08, slave1_7010_08_bit, LED[<span class="number">7</span>]);</span><br><span class="line"></span><br><span class="line">ecrt_domain_queue(domain1);</span><br><span class="line"></span><br><span class="line">sync_distributed_clocks();</span><br><span class="line"></span><br><span class="line">ecrt_master_send(master);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line">master = ecrt_request_master(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (!master)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    domain1 = ecrt_master_create_domain(master);</span><br><span class="line">    <span class="keyword">if</span> (!domain1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create configuration for bus coupler</span></span><br><span class="line">    slave0 = ecrt_master_slave_config(master, PANASONIC_0, VID_PID);</span><br><span class="line">    <span class="keyword">if</span> (!slave0)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Configuring PDOs...\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (ecrt_slave_config_pdos(slave0, EC_END, slave_0_syncs))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to configure slave0 PDOs!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*Success to configuring slave0 PDOs*\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">slave1 = ecrt_master_slave_config(master, PANASONIC_1, VID_PID);</span><br><span class="line">    <span class="keyword">if</span> (!slave1)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ecrt_slave_config_pdos(slave1, EC_END, slave_1_syncs))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Failed to configure slave1 PDOs!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;*Success to configuring slave1 PDOs*\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ecrt_domain_reg_pdo_entry_list(domain1, domain1_regs)) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;PDO entry registration failed!\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PDO entries sucess..\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// configure SYNC signals for this slave</span></span><br><span class="line">    ecrt_slave_config_dc(slave0, <span class="number">0x0300</span>, <span class="type">cycle_t</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ecrt_slave_config_dc(slave1, <span class="number">0x0300</span>, <span class="type">cycle_t</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">ecrt_master_select_reference_clock(master, slave0);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Activating master...\n&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (ecrt_master_activate(master))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!(domain1_pd = ecrt_domain_data(domain1))) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clock_gettime(CLOCK_TO_USE, &amp;wakeupTime);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Start running...\n&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">cyclic_task();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主站作为参考时钟-1"><a href="#主站作为参考时钟-1" class="headerlink" title="主站作为参考时钟"></a>主站作为参考时钟</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h1&gt;&lt;h2 id=&quot;从站作为参考时钟&quot;&gt;&lt;a href=&quot;#从站作为参考时钟&quot; class=&quot;headerlink&quot; title=&quot;从</summary>
      
    
    
    
    <category term="C" scheme="http://zhongriqian.github.io/categories/C/"/>
    
    
    <category term="EtherCAT" scheme="http://zhongriqian.github.io/tags/EtherCAT/"/>
    
    <category term="C" scheme="http://zhongriqian.github.io/tags/C/"/>
    
    <category term="Linux" scheme="http://zhongriqian.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>多网卡主机Docker网络配置问题</title>
    <link href="http://zhongriqian.github.io/2023/02/20/%E5%A4%9A%E7%BD%91%E5%8D%A1%E4%B8%BB%E6%9C%BADocker%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/"/>
    <id>http://zhongriqian.github.io/2023/02/20/%E5%A4%9A%E7%BD%91%E5%8D%A1%E4%B8%BB%E6%9C%BADocker%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-02-21T06:44:45.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>使用树莓派作为多网卡主机，其具备两张网卡，eth0和wlan0。另外需要一台PC用于测试与树莓派上容器的通信。将两台设备接入同一WiFi，然后再将两设备用网线直连。这样两设备即可以通过WiFi通信，也可以通过网线通信。</p><p>WiFi网段为192.168.31.0&#x2F;24，树莓派IP为192.168.31.154，PC的IP为192.168.31.69。</p><p>网线连接的局域网网段为169.254.0.0&#x2F;16，树莓派IP为169.254.140.68，PC的IP为169.254.140.66。</p><p>在树莓派上部署容器（容器为PLC运行环境容器），并对容器做不同的docker网络配置，测试PC与容器的通信，包括PC上的PLC开发环境软件（IDE）是否能接入容器，以及从容器内部是否能ping通PC。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 树莓派网卡信息</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class="line">    link/ether dc:a6:32:de:1f:25 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 169.254.140.68/16 brd 169.254.255.255 scope global noprefixroute eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::9b39:2105:8832:4cf6/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: wlan0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether dc:a6:32:de:1f:26 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.31.154/24 brd 192.168.31.255 scope global dynamic noprefixroute wlan0</span><br><span class="line">       valid_lft 36699sec preferred_lft 31299sec</span><br><span class="line">    inet6 fd00:6868:6868::b91/128 scope global dynamic noprefixroute </span><br><span class="line">       valid_lft 36696sec preferred_lft 36696sec</span><br><span class="line">    inet6 fd00:6868:6868:0:77e8:ee3:7b24:7a36/64 scope global mngtmpaddr noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::215f:7f6a:a210:4d05/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># PC网卡信息</span><br><span class="line">以太网适配器 以太网 2:</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::62de:7603:51d9:79cc%17</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 169.254.140.66</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.0.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br><span class="line">无线局域网适配器 WLAN:</span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   IPv6 地址 . . . . . . . . . . . . : fd00:6868:6868::69</span><br><span class="line">   IPv6 地址 . . . . . . . . . . . . : fd00:6868:6868:0:dbe:a764:e44b:ccec</span><br><span class="line">   临时 IPv6 地址. . . . . . . . . . : fd00:6868:6868:0:314c:b64b:89c7:1ef7</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::b5c6:65b9:81b9:948f%16</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.31.69</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . : fe80::cabf:4cff:fe4b:76d7%16</span><br><span class="line">                                       192.168.31.1</span><br></pre></td></tr></table></figure><h2 id="入向网络配置"><a href="#入向网络配置" class="headerlink" title="入向网络配置"></a>入向网络配置</h2><blockquote><p><strong>入向：网络内其他设备访问主机上部署的容器</strong></p></blockquote><h3 id="host模式"><a href="#host模式" class="headerlink" title="host模式"></a>host模式</h3><p>使用host网络模式创建容器，容器直接使用主机的网络配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --net=host 0375866a09cd</span><br></pre></td></tr></table></figure><p>所以PC上的IDE以树莓派的两个IP（169.254.140.68、192.168.31.154）作为目的地址都可以接入RTE。</p><h3 id="bridge模式（不绑定网卡）"><a href="#bridge模式（不绑定网卡）" class="headerlink" title="bridge模式（不绑定网卡）"></a>bridge模式（不绑定网卡）</h3><p>使用bridge网络模式创建容器，会将容器接入docker0虚拟网桥下，网桥网段一般为172.17.0.0&#x2F;16。这种模式下，主机所在网段内的其他设备无法直接访问主机上的容器，需要在容器与主机间做端口映射。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --net=bridge -p 3000:3000 0375866a09cd</span><br></pre></td></tr></table></figure><p>因为没有绑定网卡，只设置了端口映射，所以IDE以树莓派两个IP（169.254.140.68、192.168.31.154）作为目的地址都可以接入RTE。</p><h3 id="bridge模式（绑定网卡）"><a href="#bridge模式（绑定网卡）" class="headerlink" title="bridge模式（绑定网卡）"></a>bridge模式（绑定网卡）</h3><p>bridge模式创建容器，可以在设置端口映射时指定网卡IP，这样网络内其他设备只能从指定的主机网卡IP访问到容器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --net=bridge -p 192.168.31.154:3000:3000 0375866a09cd</span><br></pre></td></tr></table></figure><p>使用上面命令创建容器后，PC上的IDE只有把树莓派IP 192.168.31.154作为目的地址，才能访问到RTE容器。</p><p>相应的，如果创建容器时设置容器绑定到169.254.140.68，那IDE只有把树莓派IP 169.254.140.68作为目的地址，才能访问到RTE容器。</p><h2 id="出向网络配置"><a href="#出向网络配置" class="headerlink" title="出向网络配置"></a>出向网络配置</h2><blockquote><p><strong>出向：主机上部署的容器访问网络内其他设备</strong></p></blockquote><h3 id="host模式-1"><a href="#host模式-1" class="headerlink" title="host模式"></a>host模式</h3><p>在容器内ping主机所在的两个网段内的其他设备（如PC的两个网卡IP：192.168.31.69、169.254.140.66）都可以ping通。</p><h3 id="bridge模式"><a href="#bridge模式" class="headerlink" title="bridge模式"></a>bridge模式</h3><p>使用bridege模式创建容器，可以使用自带的docker0网桥，但缺点是创建容器时不能指定IP。使用自己创建的docker网桥，可以解决这个问题。另外对于docker0以及所有新建的docker网桥，系统会自动添加一条路由规则，使网桥网段内的所有容器都可以访问到主机所在的所有网段。使用命令“<strong>iptables -t nat -nvL –line-numbers</strong>”查看路由规则。如下面POSTROUTING链中的第一条规则，docker0网段（172.17.0.0&#x2F;16）下的容器可以访问主机所在的所有网段。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in    out        source          destination         </span><br><span class="line">1        0     0 MASQUERADE  all  --  *    !docker0   172.17.0.0/16   0.0.0.0/0                            </span><br></pre></td></tr></table></figure><p>新创建一个名为docker1的docker网络后，重新查看发现多出一条规则。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建网络（此处新建的网络本质也是bridge模式）</span><br><span class="line">docker network create --dirver bridge --subnet 172.18.0.0/16 --opt &quot;com.docker.network.bridge.name&quot;=&quot;docker1&quot; docker1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in    out       source          destination         </span><br><span class="line">1        0     0 MASQUERADE  all  --  *    !docker1  172.18.0.0/16   0.0.0.0/0           </span><br><span class="line">2       17  1234 MASQUERADE  all  --  *    !docker0  172.17.0.0/16   0.0.0.0/0           </span><br></pre></td></tr></table></figure><p>然后创建容器，网络使用自己创建的docker1，但就像前面提到的，每个docker网络自动添加的路由规则，会使docker网络下的容器能访问到主机所在的所有网段。创建两个容器（rte1、rte2）测试一下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#创建容器，加入docker1</span><br><span class="line">docker run -d --net docker1 -p 3001:3000 --name rte1 0375866a09cd</span><br><span class="line">docker run -d --net docker1 -p 3001:3000 --name rte2 0375866a09cd</span><br></pre></td></tr></table></figure><p>创建容器后，查看规则，没有针对容器IP的<strong>出向规则</strong>，只有针对整个网段的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in      out       source          destination         </span><br><span class="line">1        0     0 MASQUERADE  all  --  *      !docker1  172.18.0.0/16   0.0.0.0/0           </span><br><span class="line">2       17  1234 MASQUERADE  all  --  *      !docker0  172.17.0.0/16   0.0.0.0/0           </span><br><span class="line">3        0     0 MASQUERADE  tcp  --  *      *         172.18.0.2      172.18.0.2     tcp dpt:3000</span><br><span class="line">4        0     0 MASQUERADE  tcp  --  *      *         172.18.0.3      172.18.0.3     tcp dpt:3000</span><br></pre></td></tr></table></figure><p>从两个容器内向192.168.31.0&#x2F;24和169.254.0.0&#x2F;16两个网段ping，发现都能ping通。</p><p>如果想让某个容器只能访问192.168.31.0&#x2F;24网段，另一个容器只能访问169.254.0.0&#x2F;16网段，可以手动添加路由规则。</p><p>再创建两个容器（rte3、rte4），在创建时指定两个容器的IP。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#创建容器，加入docker1，指定IP</span><br><span class="line">docker run -d --net docker1 --ip 172.18.0.33 -p 3002:3000 --name rte3 0375866a09cd</span><br><span class="line">docker run -d --net docker1 --ip 172.18.0.44 -p 3004:3000 --name rte4 0375866a09cd</span><br></pre></td></tr></table></figure><p>此时新建的两个容器（rte3、4）都在原本路由规则覆盖下，所以先删除docker1网络自动添加的路由规则。以规则序号为目标删除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 删除POSTROUTING链下的序号1的规则</span><br><span class="line">iptables -t nat -D POSTROUTING 1</span><br></pre></td></tr></table></figure><p>重新查看路由规则，docker1的出向路由规则已被删除。在rte3、4内向两个网段ping，都ping不通。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in      out       source          destination         </span><br><span class="line">1       17  1234 MASQUERADE  all  --  *      !docker0  172.17.0.0/16   0.0.0.0/0           </span><br><span class="line">2        0     0 MASQUERADE  tcp  --  *      *         172.18.0.2      172.18.0.2     tcp dpt:3000</span><br><span class="line">3        0     0 MASQUERADE  tcp  --  *      *         172.18.0.3      172.18.0.3     tcp dpt:3000</span><br><span class="line">4        0     0 MASQUERADE  tcp  --  *      *         172.18.0.33     172.18.0.33    tcp dpt:3000</span><br><span class="line">5        0     0 MASQUERADE  tcp  --  *      *         172.18.0.44     172.18.0.44    tcp dpt:3000</span><br></pre></td></tr></table></figure><p>然后手动添加规则，完成目标需求。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 配置nat，容器rte3向外发送的数据包源IP转换成192.168.31.154</span><br><span class="line">iptables -t nat -I POSTROUTING -p all -s 172.18.0.33 -j SNAT --to-source 192.168.31.154</span><br><span class="line"></span><br><span class="line"># 配置nat，容器rte4向外发送的数据包源IP转换成169.254.140.66</span><br><span class="line">iptables -t nat -I POSTROUTING -p all -s 172.18.0.44 -j SNAT --to-source 169.254.140.68</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT 0 packets, 0 bytes)</span><br><span class="line">num   pkts bytes target     prot opt in     out        source          destination         </span><br><span class="line">1        0     0 SNAT       all  --  *      *          172.18.0.44     0.0.0.0/0      to:169.254.140.68</span><br><span class="line">2        0     0 SNAT       all  --  *      *          172.18.0.33     0.0.0.0/0      to:192.168.31.154</span><br><span class="line">3       17  1234 MASQUERADE  all  --  *      !docker0  172.17.0.0/16   0.0.0.0/0           </span><br><span class="line">4        0     0 MASQUERADE  tcp  --  *      *         172.18.0.2      172.18.0.2     tcp dpt:3000</span><br><span class="line">5        0     0 MASQUERADE  tcp  --  *      *         172.18.0.3      172.18.0.3     tcp dpt:3000</span><br><span class="line">6        0     0 MASQUERADE  tcp  --  *      *         172.18.0.33     172.18.0.33    tcp dpt:3000</span><br><span class="line">7        0     0 MASQUERADE  tcp  --  *      *         172.18.0.44     172.18.0.44    tcp dpt:3000</span><br></pre></td></tr></table></figure><p>配置完成后，再次测试，发现在容器rte3中，ping 192.168.31.69能通，ping 169.254.140.66不通；在容器rte4中，ping 169.254.140.66能通，ping 192.168.31.69不通，和目标需求一致。</p><p>当然除了可以添加针对IP的规则，也可以添加针对网段的规则，比如：创建了两个docker网络（docker11、docker22），希望docker11下的容器只能访问网段192.168.31.0&#x2F;24，docker22下的容器只能访问网段169.254.0.0&#x2F;16。可以如下配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 创建docker网络</span><br><span class="line">docker network create --dirver bridge --subnet 172.19.0.0/16 --opt &quot;com.docker.network.bridge.name&quot;=&quot;docker11&quot; docker11</span><br><span class="line">docker network create --dirver bridge --subnet 172.20.0.0/16 --opt &quot;com.docker.network.bridge.name&quot;=&quot;docker22&quot; docker22</span><br><span class="line"></span><br><span class="line"># 配置nat</span><br><span class="line">iptables -t nat -I POSTROUTING -p all -s 172.19.0.0/16 -j SNAT --to-source 192.168.31.154</span><br><span class="line">iptables -t nat -I POSTROUTING -p all -s 172.20.0.0/16 -j SNAT --to-source 169.254.140.68</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>入向（网络内其他设备到主机上的容器）：创建容器时通过参数（-p）绑定某一网卡后，网络内其他设备只能通过容器绑定的网卡IP访问容器</strong></li><li><strong>出向（主机上的容器到网络内其他设备）：配置nat，将容器IP转换为网卡IP，从而使容器能够访问网卡IP所在网段内的其他设备</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;测试环境&quot;&gt;&lt;a href=&quot;#测试环境&quot; class=&quot;headerlink&quot; title=&quot;测试环境&quot;&gt;&lt;/a&gt;测试环境&lt;/h2&gt;&lt;p&gt;使用树莓派作为多网卡主机，其具备两张网卡，eth0和wlan0。另外需要一台PC用于测试与树莓派上容器的通信。将两台设备接入</summary>
      
    
    
    
    <category term="Docker" scheme="http://zhongriqian.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://zhongriqian.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Socket网络编程</title>
    <link href="http://zhongriqian.github.io/2023/02/08/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://zhongriqian.github.io/2023/02/08/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2023-02-07T16:00:00.000Z</published>
    <updated>2023-02-08T06:23:00.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><blockquote><p><strong>各类结构体以不同方式存放不同类型、不同数量的Socket信息，作为不同Socket接口函数的输入参数使用</strong></p></blockquote><h2 id="in-addr"><a href="#in-addr" class="headerlink" title="in_addr"></a>in_addr</h2><blockquote><p><strong>表示32位的IPv4地址</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于表示32位的IPv4地址</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>&#123;</span></span><br><span class="line">    <span class="type">in_addr_t</span> s_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// int_addr_t类型为unsigned int，长度为4字节（32位），字节序为网络顺序（大端字节序）</span></span><br><span class="line"><span class="comment">// 如IP地址192.168.3.144，用int_addr_t类型存储为0Xc0a80390</span></span><br></pre></td></tr></table></figure><h2 id="sockaddr"><a href="#sockaddr" class="headerlink" title="sockaddr"></a>sockaddr</h2><blockquote><p><strong>套接字结构</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span>&#123;</span></span><br><span class="line"><span class="type">sa_family_t</span> sin_family;<span class="comment">// 协议族</span></span><br><span class="line">    <span class="type">char</span> sa_data[<span class="number">14</span>]; <span class="comment">// 套接字中的目标IP和端口</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sa_family_t类型为unsigned short，长度为2字节（16位）</span></span><br><span class="line"><span class="comment">// 取值包括：AF_INET、AF_INET6、AF_UNSPE</span></span><br></pre></td></tr></table></figure><h2 id="sockaddr-in"><a href="#sockaddr-in" class="headerlink" title="sockaddr_in"></a>sockaddr_in</h2><blockquote><p><strong>套接字结构</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span>&#123;</span></span><br><span class="line">    <span class="type">sa_family_t</span>     sin_family;   <span class="comment">// 协议族</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span>  sin_port;     <span class="comment">// 端口号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span>  <span class="title">sin_addr</span>;</span>     <span class="comment">// IP地址结构体</span></span><br><span class="line">    <span class="type">char</span>            sin_zero[<span class="number">8</span>];  <span class="comment">// 填充，为了与sockaddr结构体在内存中对齐，方便相互转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="字节序转换"><a href="#字节序转换" class="headerlink" title="字节序转换"></a>字节序转换</h2><blockquote><p><strong>字节序指在内存中存放大于一个字节的数据时，数据各字节的存放顺序。</strong><br><strong>字节序可分为：</strong><br>        大端字节序：高位字节在前，低位字节在后<br>        小端字节序：低位字节在前，高位字节在后</p></blockquote><blockquote><p><strong>设计两种字节序的原因：</strong><br>大端字节序符合人类的读写习惯，比如我们想存放“一千二百三十四”这个十进制数字（转换为十六进制为0x04D2），用大端字节序存储后，当我们读取时还是0x04D2。<br>但如果用小端字节序存储，读取时就变为0xD204。虽然小端字节序不符合人类读写习惯，但有利于提高计算效率，因为计算机计算时都是从数据的低位开始计算。</p></blockquote><blockquote><p><strong>主机字节序：小端字节序</strong><br><strong>网络字节序：大端字节序</strong></p></blockquote><h3 id="普通数据的字节序转换"><a href="#普通数据的字节序转换" class="headerlink" title="普通数据的字节序转换"></a>普通数据的字节序转换</h3><h4 id="主机字节序—-gt-网络字节序"><a href="#主机字节序—-gt-网络字节序" class="headerlink" title="主机字节序—&gt;网络字节序"></a>主机字节序—&gt;网络字节序</h4><blockquote><p>功能：无符号32位&#x2F;16位整型数据转换<br>参数：主机字节序数据<br>返回值：网络字节序数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">htonl</span><span class="params">(<span class="type">uint32_t</span> hostlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">htons</span><span class="params">(<span class="type">uint16_t</span> hostshort)</span>;</span><br></pre></td></tr></table></figure><h4 id="网络字节序—-gt-主机字节序"><a href="#网络字节序—-gt-主机字节序" class="headerlink" title="网络字节序—&gt;主机字节序"></a>网络字节序—&gt;主机字节序</h4><blockquote><p>功能：无符号32位&#x2F;16位整型数据转换<br>参数：网络字节序数据<br>返回值：主机字节序数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint32_t</span> <span class="title function_">ntohl</span><span class="params">(<span class="type">uint32_t</span> netlong)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">ntohs</span><span class="params">(<span class="type">uint16_t</span> netshort)</span>;</span><br></pre></td></tr></table></figure><h3 id="IP地址的字节序转换"><a href="#IP地址的字节序转换" class="headerlink" title="IP地址的字节序转换"></a>IP地址的字节序转换</h3><h4 id="字符串—-gt-网络字节序"><a href="#字符串—-gt-网络字节序" class="headerlink" title="字符串—&gt;网络字节序"></a>字符串—&gt;网络字节序</h4><h5 id="inet-pton"><a href="#inet-pton" class="headerlink" title="inet_pton"></a>inet_pton</h5><blockquote><p>参数af：地址协议族（AF_INET、AF_INET6）<br>参数strptr：指向IP字符串存储地址的指针<br>参数addrptr：指向网络字节序IP数据存储地址的指针<br>返回值：成功返回1，输入的IP地址无效返回0，出错返回-1</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">inet_pton</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">char</span> *strptr, <span class="type">void</span> *addrptr)</span>;</span><br></pre></td></tr></table></figure><h5 id="inet-aton"><a href="#inet-aton" class="headerlink" title="inet_aton"></a>inet_aton</h5><blockquote><p>参数cp：指向IP字符串存储地址的指针<br>参数inp：指向in_addr结构体的指针，结构体内s_addr存储转换后的格式为网络字节序的32位二进制格式的IP<br>返回值：成功返回非0，IP地址无效返回0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">inet_aton</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp, <span class="keyword">struct</span> in_addr *inp)</span>;</span><br></pre></td></tr></table></figure><h5 id="inet-addr"><a href="#inet-addr" class="headerlink" title="inet_addr"></a>inet_addr</h5><blockquote><p>参数cp：指向IP字符串存储地址的指针<br>返回值：in_addr_t类型变量，存储网络字节序的32位二进制格式的IP</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_addr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串—-gt-主机字节序"><a href="#字符串—-gt-主机字节序" class="headerlink" title="字符串—&gt;主机字节序"></a>字符串—&gt;主机字节序</h4><h5 id="inet-network"><a href="#inet-network" class="headerlink" title="inet_network"></a>inet_network</h5><blockquote><p>参数cp：指向IP字符串存储地址的指针<br>返回值：in_addr_t类型变量，存储主机字节序的32位二进制格式的IP</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_network</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cp)</span>;</span><br></pre></td></tr></table></figure><h4 id="网络字节序—-gt-字符串"><a href="#网络字节序—-gt-字符串" class="headerlink" title="网络字节序—&gt;字符串"></a>网络字节序—&gt;字符串</h4><h5 id="inet-ntop"><a href="#inet-ntop" class="headerlink" title="inet_ntop"></a>inet_ntop</h5><blockquote><p>参数af：地址协议族<br>参数addrptr：指向网络字节序IP数据存储地址的指针<br>参数strptr：指向IP字符串存储地址的指针<br>参数len：IP字符串存储地址空间大小<br>返回值：成功返回参数strptr的指针，失败返回NULL且修改errno的值。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">inet_ntop</span><span class="params">(<span class="type">int</span> af, <span class="type">const</span> <span class="type">void</span> *addrptr, <span class="type">char</span> *strptr, <span class="type">size_t</span> len)</span>;</span><br></pre></td></tr></table></figure><h5 id="inet-ntoa"><a href="#inet-ntoa" class="headerlink" title="inet_ntoa"></a>inet_ntoa</h5><blockquote><p>参数in：in_addr结构体，结构体内s_addr存储网络字节序的32位二进制格式的IP<br>返回值：指向IP字符串存储地址的指针</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">inet_ntoa</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><blockquote><p><strong>测试inet_pton、inet_ntop</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 测试inet_pton</span></span><br><span class="line"><span class="type">char</span> ip_str[] =<span class="string">&quot;193.168.1.10&quot;</span>;</span><br><span class="line"><span class="type">in_addr_t</span> ip_addr;</span><br><span class="line"><span class="type">int</span> re = inet_pton(AF_INET, ip_str, (<span class="type">void</span> *)&amp;ip_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_pton返回值 = %d\n&quot;</span>,re);</span><br><span class="line"><span class="comment">// inet_pton返回值 = 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ip_addr = %d\n&quot;</span>,ip_addr);</span><br><span class="line"><span class="comment">// ip_addr = 167880897</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line"><span class="comment">// 测试inet_ntop</span></span><br><span class="line"><span class="type">char</span> ip_str2[INET_ADDRSTRLEN];</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *re2 = inet_ntop(AF_INET, (<span class="type">const</span> <span class="type">void</span> *)&amp;ip_addr, ip_str2, <span class="keyword">sizeof</span>(ip_str2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_ntop返回值 = %s\n&quot;</span>, re2);</span><br><span class="line"><span class="comment">// inet_ntop返回值 = 193.168.1.10</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ip_str2 = %s\n&quot;</span>,ip_str2);</span><br><span class="line"><span class="comment">// ip_str2 = 193.168.1.10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>测试inet_aton、inet_ntoa</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 测试inet_aton</span></span><br><span class="line"><span class="type">char</span> ip_str[] =<span class="string">&quot;193.168.1.10&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr</span>;</span></span><br><span class="line"><span class="type">int</span> re = inet_aton(ip_str, &amp;ip_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_aton返回值 = %d\n&quot;</span>,re);</span><br><span class="line"><span class="comment">// inet_aton返回值 = 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ip_addr.s_addr = %d\n&quot;</span>,ip_addr.s_addr);</span><br><span class="line"><span class="comment">// ip_addr.s_addr = 167880897</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试inet_ntoa</span></span><br><span class="line"><span class="type">char</span> *ip_str2;</span><br><span class="line">ip_str2 = inet_ntoa(ip_addr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_ntoa返回值 = %s\n&quot;</span>, ip_str2);</span><br><span class="line"><span class="comment">// inet_ntoa返回值 = 193.168.1.10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>测试inet_addr、inet_network</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="comment">// 测试inet_addr</span></span><br><span class="line"><span class="type">char</span> ip_str[] =<span class="string">&quot;193.168.1.10&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr1</span>;</span></span><br><span class="line">ip_addr1.s_addr = inet_addr(ip_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_addr返回值 = %u\n&quot;</span>,ip_addr1.s_addr);</span><br><span class="line"><span class="comment">// inet_addr返回值 = 167880897</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试inet_network</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr2</span>;</span></span><br><span class="line">ip_addr2.s_addr = inet_network(ip_str);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;inet_network返回值 = %u\n&quot;</span>, ip_addr2.s_addr);</span><br><span class="line"><span class="comment">// inet_network返回值 = 3249013002</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IP地址处理"><a href="#IP地址处理" class="headerlink" title="IP地址处理"></a>IP地址处理</h2><h3 id="IP地址—-gt-主机地址"><a href="#IP地址—-gt-主机地址" class="headerlink" title="IP地址—&gt;主机地址"></a>IP地址—&gt;主机地址</h3><blockquote><p>参数in：in_addr结构体<br>返回值：in_addr_t类型变量，存储主机字节序的主机地址数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_lnaof</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br></pre></td></tr></table></figure><h3 id="IP地址—-gt-网络地址"><a href="#IP地址—-gt-网络地址" class="headerlink" title="IP地址—&gt;网络地址"></a>IP地址—&gt;网络地址</h3><blockquote><p>参数in：in_addr结构体<br>返回值：in_addr_t类型变量，存储主机字节序的网络地址数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">in_addr_t</span> <span class="title function_">inet_netof</span><span class="params">(<span class="keyword">struct</span> in_addr in)</span>;</span><br></pre></td></tr></table></figure><h3 id="主机地址-网络地址—-gt-IP地址"><a href="#主机地址-网络地址—-gt-IP地址" class="headerlink" title="主机地址+网络地址—&gt;IP地址"></a>主机地址+网络地址—&gt;IP地址</h3><blockquote><p>参数net：in_addr_t类型变量，存储网络字节序的网络地址数据<br>参数host：in_addr_t类型变量，存储网络字节序的主机地址数据<br>返回值：in_addr结构体，内部包含in_addr_t类型变量，存储网络主机字节序的IP地址数据</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> in_addr <span class="title function_">inet_makeaddr</span><span class="params">(<span class="type">in_addr_t</span> net, <span class="type">in_addr_t</span> host)</span>;</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><blockquote><p><strong>测试inet_lnaof、inet_netof、inet_makeaddr</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;arpa/inet.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> ip_str1[] = <span class="string">&quot;44.135.86.12&quot;</span>;</span><br><span class="line"><span class="type">char</span> ip_str2[] = <span class="string">&quot;172.16.23.95&quot;</span>;</span><br><span class="line"><span class="type">char</span> *ip_str;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *net_str1;</span><br><span class="line"><span class="type">char</span> *net_str2;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *host_str1;</span><br><span class="line"><span class="type">char</span> *host_str2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">ip_addr</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">net_addr1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">net_addr2</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">host_addr1</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">host_addr2</span>;</span></span><br><span class="line"></span><br><span class="line">inet_aton(ip_str1,&amp;ip_addr1);              <span class="comment">// 将IP地址从字符串格式转为网络字节序的32位二进制格式</span></span><br><span class="line"></span><br><span class="line">host_addr1.s_addr = inet_lnaof(ip_addr1);     <span class="comment">// 将IP地址转换为主机地址，格式为主机字节序的32位二进制格式</span></span><br><span class="line">host_addr1.s_addr = htonl(host_addr1.s_addr); <span class="comment">// 主机字节序转换为网络字节序</span></span><br><span class="line">host_str1 = inet_ntoa(host_addr1);            <span class="comment">// 将主机地址从网络字节序的32位二进制格式转换为字符串格式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机地址：%s\n&quot;</span>,host_str1);</span><br><span class="line"></span><br><span class="line">net_addr1.s_addr = inet_netof(ip_addr1);      <span class="comment">// 将IP地址转换为网络地址，格式为主机字节序的32位二进制格式</span></span><br><span class="line">net_addr1.s_addr = htonl(net_addr1.s_addr);   <span class="comment">// 主机字节序转换为网络字节序</span></span><br><span class="line">net_str1 = inet_ntoa(net_addr1);              <span class="comment">// 将主机地址从网络字节序的32位二进制格式转换为字符串格式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络地址：%s\n&quot;</span>,net_str1);</span><br><span class="line"></span><br><span class="line">host_addr1.s_addr = ntohl(host_addr1.s_addr);  <span class="comment">// 网络字节序转换为主机字节序</span></span><br><span class="line">net_addr1.s_addr = ntohl(net_addr1.s_addr);    <span class="comment">// 网络字节序转换为主机字节序</span></span><br><span class="line">ip_addr = inet_makeaddr(net_addr1.s_addr, host_addr1.s_addr); <span class="comment">// 网络地址和主机地址合成IP地址，格式为网络字节序的32位二进制格式</span></span><br><span class="line">ip_str = inet_ntoa(ip_addr);                   <span class="comment">// 将IP地址从网络字节序的32位二进制格式转换为字符串格式</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;IP地址：%s\n&quot;</span>,ip_str);</span><br><span class="line"></span><br><span class="line">inet_aton(ip_str2,&amp;ip_addr2);</span><br><span class="line"></span><br><span class="line">host_addr2.s_addr = inet_lnaof(ip_addr2);</span><br><span class="line">host_addr2.s_addr = htonl(host_addr2.s_addr);</span><br><span class="line">host_str2 = inet_ntoa(host_addr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机地址：%s\n&quot;</span>,host_str2);</span><br><span class="line"></span><br><span class="line">net_addr2.s_addr = inet_netof(ip_addr2);</span><br><span class="line">net_addr2.s_addr = htonl(net_addr2.s_addr);</span><br><span class="line">net_str2 = inet_ntoa(net_addr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;网络地址：%s\n&quot;</span>,net_str2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="常规SocketC"><a href="#常规SocketC" class="headerlink" title="常规SocketC"></a>常规SocketC</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;各类结构体以不同方式存放不同类型、不同数量的Socket信息，作为不同Socket接口函数</summary>
      
    
    
    
    <category term="Linux" scheme="http://zhongriqian.github.io/categories/Linux/"/>
    
    
    <category term="C" scheme="http://zhongriqian.github.io/tags/C/"/>
    
    <category term="Linux" scheme="http://zhongriqian.github.io/tags/Linux/"/>
    
    <category term="Socket" scheme="http://zhongriqian.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Linux常用网络命令</title>
    <link href="http://zhongriqian.github.io/2023/01/28/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/"/>
    <id>http://zhongriqian.github.io/2023/01/28/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</id>
    <published>2023-01-27T16:00:00.000Z</published>
    <updated>2023-02-16T07:24:14.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h1><p><strong>功能</strong></p><blockquote><p>显示网络设备信息</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 显示某网卡信息</span><br><span class="line">ifconfig eth0</span><br><span class="line"></span><br><span class="line"># 配置网卡IP</span><br><span class="line">ifconfig ehx x.x.x.x netmask x.x.x.x</span><br><span class="line">ifconfig eh0 192.168.10.2 netmask 255.255.255.0</span><br></pre></td></tr></table></figure><h1 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h1><p><strong>功能</strong></p><blockquote><p>显示网络设备信息</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 显示网卡设备信息</span><br><span class="line">ip a</span><br><span class="line"></span><br><span class="line"># 显示网卡设备链路层信息</span><br><span class="line">ip link</span><br><span class="line">ip -s link</span><br><span class="line"></span><br><span class="line"># 查看所在局域网内设备MAC地址</span><br><span class="line">ip neighbor</span><br></pre></td></tr></table></figure><h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><p><strong>功能</strong></p><blockquote><p>发送ICMP包，检测网络状态</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 检测到IP为192.168.137.16主机的网络</span><br><span class="line">ping 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定发送次数</span><br><span class="line">ping -c 10 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定发送时间间隔（单位s，缺省值1s）</span><br><span class="line">ping -i 10 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定持续发送时间（单位s）</span><br><span class="line">ping -w 10 192.168.137.16</span><br><span class="line"></span><br><span class="line"># 指定发送数据包字节数（缺省64字节，其中ICMP包头8字节、负载56字节，最大65535字节）</span><br><span class="line">ping -s 1000 192.168.137.16</span><br></pre></td></tr></table></figure><h1 id="route"><a href="#route" class="headerlink" title="route"></a>route</h1><p><strong>功能</strong></p><blockquote><p>显示和操作路由表</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 显示路由表</span><br><span class="line">route -nee</span><br><span class="line"></span><br><span class="line"># 添加主机路由</span><br><span class="line">route add -host 192.168.1.2 gw 172.16.0.1 dev eth0</span><br><span class="line"></span><br><span class="line"># 添加网络路由</span><br><span class="line">route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 dev eth0</span><br><span class="line">route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0</span><br><span class="line"></span><br><span class="line"># 添加默认路由</span><br><span class="line">route add -net 0.0.0.0 netmask 0.0.0.0 gw 172.16.0.1</span><br><span class="line">route add -net 0.0.0.0/0 gw 172.16.0.1</span><br><span class="line">route add default gw 172.16.0.1</span><br><span class="line"></span><br><span class="line"># 删除路由</span><br><span class="line">route add -host 192.168.1.2 gw 172.16.0.1 dev eth0</span><br></pre></td></tr></table></figure><h1 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h1><p><strong>功能</strong></p><blockquote><p>查看网络状态、路由表、接口信息等</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有TCP协议相关信息，及其所属进程</span><br><span class="line">netstat -anpt</span><br><span class="line"></span><br><span class="line"># 显示所有UDP协议相关信息，及其所属进程</span><br><span class="line">netstat -anpu</span><br><span class="line"></span><br><span class="line"># 显示路由表</span><br><span class="line">netstat -r</span><br><span class="line"></span><br><span class="line"># 显示网卡信息</span><br><span class="line">netstat -i</span><br></pre></td></tr></table></figure><h1 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h1><p><strong>功能</strong></p><blockquote><p>获取socket信息</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 显示所有TCP协议相关信息，及其所属进程</span><br><span class="line">ss -apt</span><br><span class="line"></span><br><span class="line"># 显示所有UDP协议相关信息，及其所属进程</span><br><span class="line">ss -apu</span><br></pre></td></tr></table></figure><h1 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h1><p><strong>功能</strong></p><blockquote><p>测试当前主机到目标主机间经过的网络节点</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 检测当前主机到IP地址为192.168.1.1的主机间经过的网络节点</span><br><span class="line">traceroute 192.168.1.1</span><br><span class="line"></span><br><span class="line"># 检测当前主机到域名为www.baidu.com的主机间经过的网络节点</span><br><span class="line">traceroute www.baidu.com</span><br></pre></td></tr></table></figure><h1 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h1><p><strong>功能</strong></p><blockquote><p>域名解析</p></blockquote><h1 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h1><p><strong>功能</strong></p><blockquote><p>域名解析</p></blockquote><h1 id="arp"><a href="#arp" class="headerlink" title="arp"></a>arp</h1><p><strong>功能</strong></p><blockquote><p>操作arp缓冲区</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 显示arp表（IP与MAC对于关系）</span><br><span class="line">arp -n</span><br><span class="line"># 显示arp表（主机名与MAC对应关系）</span><br><span class="line">arp -e</span><br></pre></td></tr></table></figure><h1 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h1><p><strong>功能</strong></p><blockquote><p>端口扫描、网络扫描</p></blockquote><p><strong>常用参数示例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看本机开放的TCP端口</span><br><span class="line">nmap -sT 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 查看本机开放的UDP端口</span><br><span class="line">nmap -sU 127.0.0.1</span><br><span class="line"></span><br><span class="line"># 扫描192.168.1.0/24网段中开放80端口的主机</span><br><span class="line">nmap -p 80 192.168.1.0/24</span><br><span class="line"></span><br><span class="line"># 扫描192.168.1.0/24网段中有哪些存活的主机</span><br><span class="line">nmap -n -sP 192.168.1.0/24</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ifconfig&quot;&gt;&lt;a href=&quot;#ifconfig&quot; class=&quot;headerlink&quot; title=&quot;ifconfig&quot;&gt;&lt;/a&gt;ifconfig&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示网络设备</summary>
      
    
    
    
    <category term="Linux" scheme="http://zhongriqian.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="http://zhongriqian.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数采网关程序——Modbus-RTU与MQTT协议转换</title>
    <link href="http://zhongriqian.github.io/2022/08/17/%E6%95%B0%E9%87%87%E7%BD%91%E5%85%B3%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94Modbus-RTU%E4%B8%8EMQTT%E5%8D%8F%E8%AE%AE%E8%BD%AC%E6%8D%A2/"/>
    <id>http://zhongriqian.github.io/2022/08/17/%E6%95%B0%E9%87%87%E7%BD%91%E5%85%B3%E7%A8%8B%E5%BA%8F%E2%80%94%E2%80%94Modbus-RTU%E4%B8%8EMQTT%E5%8D%8F%E8%AE%AE%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-08-16T16:00:00.000Z</published>
    <updated>2023-01-28T08:53:58.637Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;modbus.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;MQTTClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDRESS     <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLIENTID    <span class="string">&quot;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOOP             10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_ID        1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDRESS_START    0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADDRESS_END      4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CODE             1</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">publish</span><span class="params">(MQTTClient client, <span class="type">char</span>* topic, <span class="type">char</span>* payload)</span> &#123;</span><br><span class="line">    MQTTClient_message pubmsg = MQTTClient_message_initializer;</span><br><span class="line">    pubmsg.payload = payload;</span><br><span class="line">    pubmsg.payloadlen = <span class="built_in">strlen</span>(pubmsg.payload);</span><br><span class="line">    pubmsg.qos = <span class="number">2</span>;</span><br><span class="line">    pubmsg.retained = <span class="number">0</span>;</span><br><span class="line">    MQTTClient_deliveryToken token;</span><br><span class="line">    MQTTClient_publishMessage(client, topic, &amp;pubmsg, &amp;token);</span><br><span class="line">    MQTTClient_waitForCompletion(client, token, <span class="number">1000L</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Message &#x27;%s&#x27; with delivery token %d delivered\n&quot;</span>, payload, token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">on_message</span><span class="params">(<span class="type">void</span> *context, <span class="type">char</span> *topicName, <span class="type">int</span> topicLen, MQTTClient_message *message)</span> &#123;</span><br><span class="line">    <span class="type">char</span>* payload = message-&gt;payload;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Received operation %s\n&quot;</span>, payload);</span><br><span class="line">    MQTTClient_freeMessage(&amp;message);</span><br><span class="line">    MQTTClient_free(topicName);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">modbus_t</span> *ctx;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">int</span> nb_fail;</span><br><span class="line">    <span class="type">int</span> nb_loop;</span><br><span class="line">    <span class="type">int</span> addr;</span><br><span class="line">    <span class="type">int</span> nb;</span><br><span class="line">    <span class="type">uint8_t</span> *tab_rp_bits;</span><br><span class="line">    <span class="type">uint16_t</span> *tab_rp_registers;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">100</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*MQTT initialize*/</span></span><br><span class="line">    MQTTClient client;</span><br><span class="line">    MQTTClient_create(&amp;client, ADDRESS, CLIENTID, MQTTCLIENT_PERSISTENCE_NONE, <span class="literal">NULL</span>);</span><br><span class="line">    MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;</span><br><span class="line">    conn_opts.username = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    conn_opts.password = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    MQTTClient_setCallbacks(client, <span class="literal">NULL</span>, <span class="literal">NULL</span>, on_message, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> rc_mqtt;</span><br><span class="line">    <span class="keyword">if</span> ((rc_mqtt = MQTTClient_connect(client, &amp;conn_opts)) != MQTTCLIENT_SUCCESS) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Failed to connect, return code %d\n&quot;</span>, rc_mqtt);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//create device</span></span><br><span class="line">    publish(client, <span class="string">&quot;s/us&quot;</span>, <span class="string">&quot;100,USTB_TEST,c8y_MQTTDevice&quot;</span>);</span><br><span class="line">    <span class="comment">//set hardware information</span></span><br><span class="line">    publish(client, <span class="string">&quot;s/us&quot;</span>, <span class="string">&quot;110,S123456789,MQTT test model,Rev0.1&quot;</span>);</span><br><span class="line">    <span class="comment">//listen for operation</span></span><br><span class="line">    MQTTClient_subscribe(client, <span class="string">&quot;s/ds&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">/* RTU */</span></span><br><span class="line">    ctx = modbus_new_rtu(<span class="string">&quot;/dev/ttyS1&quot;</span>, <span class="number">19200</span>, <span class="string">&#x27;N&#x27;</span>, <span class="number">8</span>, <span class="number">1</span>);</span><br><span class="line">    modbus_set_slave(ctx, SERVER_ID);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* TCP */</span></span><br><span class="line"><span class="comment">//    ctx = modbus_new_tcp(&quot;127.0.0.1&quot;, 1502);</span></span><br><span class="line"><span class="comment">//    ctx = modbus_new_tcp(&quot;192.168.72.61&quot;, 502);</span></span><br><span class="line"><span class="comment">//    modbus_set_debug(ctx, TRUE);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modbus_connect(ctx) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Connection failed: %s\n&quot;</span>,</span><br><span class="line">                modbus_strerror(errno));</span><br><span class="line">        modbus_free(ctx);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nb = ADDRESS_END - ADDRESS_START;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(CODE == <span class="number">1</span> || CODE == <span class="number">2</span>)&#123;</span><br><span class="line">        tab_rp_bits = (<span class="type">uint8_t</span> *) <span class="built_in">malloc</span>(nb * <span class="keyword">sizeof</span>(<span class="type">uint8_t</span>));</span><br><span class="line">        <span class="built_in">memset</span>(tab_rp_bits, <span class="number">0</span>, nb * <span class="keyword">sizeof</span>(<span class="type">uint8_t</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        tab_rp_registers = (<span class="type">uint16_t</span> *) <span class="built_in">malloc</span>(nb * <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>));</span><br><span class="line">        <span class="built_in">memset</span>(tab_rp_registers, <span class="number">0</span>, nb * <span class="keyword">sizeof</span>(<span class="type">uint16_t</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nb_loop = nb_fail = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (nb_loop++ &lt; LOOP) &#123;</span><br><span class="line">        <span class="type">int</span> i;</span><br><span class="line">        addr = ADDRESS_START;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">switch</span>(CODE)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: rc = modbus_read_bits(ctx, addr, nb, tab_rp_bits);<span class="keyword">break</span>;                    <span class="comment">// modbus功能码01</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: rc = modbus_read_input_bits(ctx, addr, nb, tab_rp_bits);<span class="keyword">break</span>;              <span class="comment">// modbus功能码02</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: rc = modbus_read_registers(ctx, addr, nb, tab_rp_registers);<span class="keyword">break</span>;          <span class="comment">// modbus功能码03</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: rc = modbus_read_input_registers(ctx, addr, nb, tab_rp_registers);<span class="keyword">break</span>;    <span class="comment">// modbus功能码04</span></span><br><span class="line">            <span class="keyword">default</span>: rc = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&lt;&lt;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (rc != nb) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;ERROR modbus_read_registers (%d)\n&quot;</span>, rc);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Address = %d, nb = %d\n&quot;</span>, addr, nb);</span><br><span class="line">            nb_fail++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;nb; i++) &#123;</span><br><span class="line">                buffer[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                <span class="keyword">switch</span>(CODE)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Status = %X\n&quot;</span>, addr+i, tab_rp_bits[i]);</span><br><span class="line">                            <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_bits[i]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Status = %X\n&quot;</span>, addr+i, tab_rp_bits[i]);</span><br><span class="line">                           <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_bits[i]);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Value = %d\n&quot;</span>, ADDRESS_START+i, tab_rp_registers[i]);</span><br><span class="line">                           <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_registers[i]);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">&quot;Address = %d, Value = %d\n&quot;</span>, ADDRESS_START+i, tab_rp_registers[i]);</span><br><span class="line">                           <span class="built_in">sprintf</span>(buffer,<span class="string">&quot;%s%s%d%s%d&quot;</span>,<span class="string">&quot;200,&quot;</span>, <span class="string">&quot;Register_Address_&quot;</span>,ADDRESS_START+i, <span class="string">&quot;,ustb_test,&quot;</span>, tab_rp_registers[i]);</span><br><span class="line">                           <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                publish(client, <span class="string">&quot;s/us&quot;</span>,buffer);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;LOOP: %d, CODE: %d\n&quot;</span>, nb_loop, CODE);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Read: &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (nb_fail)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d FAILS\n&quot;</span>, nb_fail);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;SUCCESS\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&gt;&gt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Free the memory */</span></span><br><span class="line">    <span class="built_in">free</span>(tab_rp_registers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Close the connection */</span></span><br><span class="line">    modbus_close(ctx);</span><br><span class="line">    modbus_free(ctx);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li</summary>
      
    
    
    
    <category term="C" scheme="http://zhongriqian.github.io/categories/C/"/>
    
    
    <category term="C" scheme="http://zhongriqian.github.io/tags/C/"/>
    
    <category term="Modbus RTU" scheme="http://zhongriqian.github.io/tags/Modbus-RTU/"/>
    
    <category term="MQTT" scheme="http://zhongriqian.github.io/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>Python计算TBS程序</title>
    <link href="http://zhongriqian.github.io/2022/05/16/Python%E8%AE%A1%E7%AE%97TBS%E7%A8%8B%E5%BA%8F/"/>
    <id>http://zhongriqian.github.io/2022/05/16/Python%E8%AE%A1%E7%AE%97TBS%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-05-15T16:00:00.000Z</published>
    <updated>2023-01-28T08:53:37.398Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N_PRB</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    由给定参数获得分配给PDSCH的PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path, scs, bw</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建PRB查询对象</span></span><br><span class="line"><span class="string">        :param file_path: PRB表的路径（该表可由scs和bw查PRB值）</span></span><br><span class="line"><span class="string">        :param scs: sub carrier spacing，子载波间隔（kHz）</span></span><br><span class="line"><span class="string">        :param bw: bandwidth，载波带宽（MHz）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.table = load_workbook(file_path)</span><br><span class="line">        self.sheet = self.table[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line">        self.scs = scs</span><br><span class="line">        self.bw = bw</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_prb</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        通过参数scs和bw查表得到PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">        :return:PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> self.scs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>, <span class="number">78</span>):</span><br><span class="line">                        <span class="keyword">if</span> self.bw == <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="string">&#x27;1&#x27;</span>].value):</span><br><span class="line">                            N_prb = <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="built_in">str</span>(line)].value)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;scs=%dkHz，bw=%dMHz ===&gt; PRB数量=%d&quot;</span> % (self.scs, self.bw, N_prb))</span><br><span class="line">            <span class="keyword">return</span> N_prb</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_N_prb运行失败，scs=%dkHz,bw=%dMHz无对应PRB值&quot;</span> % (self.scs, self.bw))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TBS</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    通过给定参数获得TBS（Transport Block Size，传输块大小）数值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, N_prb, file_path, Imcs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        创建Imcs表对象，相关参数赋值</span></span><br><span class="line"><span class="string">        :param N_prb:PRB（Physical resource block，物理资源块）数量</span></span><br><span class="line"><span class="string">        :param file_path:Imcs表的路径，该表可由Imcs（Modulation and Coding Scheme index，调制与编码策略索引）值</span></span><br><span class="line"><span class="string">                        查对应qm（调制阶数）和R（码率）</span></span><br><span class="line"><span class="string">        :param Imcs:Imcs（Modulation and Coding Scheme index，调制与编码策略索引）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.N_prb = N_prb</span><br><span class="line">        self.table = load_workbook(file_path)</span><br><span class="line">        self.sheet = self.table[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line">        self.N_rb_sc = <span class="number">12</span>  <span class="comment"># 一个RB中的子载波个数</span></span><br><span class="line">        self.N_sh_symb = <span class="number">13</span>  <span class="comment"># 一个时隙中分配给PDSCH的符号数</span></span><br><span class="line">        self.N_prb_oh = <span class="number">0</span>  <span class="comment"># 由高层参数决定</span></span><br><span class="line">        self.N_prb_dmrs = <span class="number">12</span>  <span class="comment"># 一个时隙中一个PRB宽度中DMRS占用的子载波，DMRS tpye1和DMRS type2两种类型</span></span><br><span class="line">        self.Imcs = Imcs  <span class="comment"># Imcs（Modulation and Coding Scheme index，调制与编码策略索引）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_re</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算给定带宽中一个时隙内分配给PDSCH的RE（Resource Element，资源元素）数量</span></span><br><span class="line"><span class="string">        :return: RE（Resource Element，资源元素）数量</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            N_re_t = <span class="built_in">min</span>(<span class="number">156</span>, self.N_rb_sc * self.N_sh_symb - self.N_prb_dmrs - self.N_prb_oh)</span><br><span class="line">            N_re = <span class="built_in">int</span>(N_re_t * self.N_prb)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;在包含%d个RB的带宽中，一个时隙内分配给PDSCH的RE数量=%d&quot;</span> % (self.N_prb, N_re))</span><br><span class="line">            <span class="keyword">return</span> N_re</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Calculate_N_re运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算信息比特数</span></span><br><span class="line"><span class="string">        :return:信息比特数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Nre = self.calculate_N_re()</span><br><span class="line">            v = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">34</span>):</span><br><span class="line">                <span class="keyword">if</span> self.Imcs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    qm = <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;B&#x27;</span> + <span class="built_in">str</span>(line)].value)</span><br><span class="line">                    R = <span class="built_in">float</span>(self.sheet[<span class="string">&#x27;c&#x27;</span> + <span class="built_in">str</span>(line)].value) / <span class="number">1024</span></span><br><span class="line">            N_info = Nre * qm * v * R</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;MAC层向物理层传输的一个TB中的信息比特数=%d bits&quot;</span> % N_info)</span><br><span class="line">            <span class="keyword">return</span> N_info</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_N_info运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_q_N_info</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算信息比特数的量化中间数</span></span><br><span class="line"><span class="string">        :return:信息比特数的量化中间数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Ninfo = self.calculate_N_info()</span><br><span class="line">            <span class="keyword">if</span> Ninfo &gt; <span class="number">3824</span>:</span><br><span class="line">                n = <span class="built_in">int</span>(math.log((Ninfo - <span class="number">24</span>), <span class="number">2</span>) - <span class="number">5</span>)</span><br><span class="line">                q_N_info = <span class="built_in">max</span>(<span class="number">3840</span>, math.<span class="built_in">pow</span>(<span class="number">2</span>, n) * <span class="built_in">round</span>((Ninfo - <span class="number">24</span>) / math.<span class="built_in">pow</span>(<span class="number">2</span>, n)))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                n = <span class="built_in">max</span>(<span class="number">3</span>, <span class="built_in">int</span>(math.log(Ninfo, <span class="number">2</span>) - <span class="number">6</span>))</span><br><span class="line">                q_N_info = <span class="built_in">max</span>(<span class="number">24</span>, math.<span class="built_in">pow</span>(<span class="number">2</span>, n) * <span class="built_in">round</span>(Ninfo / math.<span class="built_in">pow</span>(<span class="number">2</span>, n)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;信息比特数的量化中间值=%d bits&quot;</span> % q_N_info)</span><br><span class="line">            <span class="keyword">return</span> q_N_info</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_q_N_info运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_TBS</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        计算TBS（Transport Block Size，传输块大小）</span></span><br><span class="line"><span class="string">        :return: TBS（Transport Block Size，传输块大小）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            qNinfo = self.calculate_q_N_info()</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">34</span>):</span><br><span class="line">                <span class="keyword">if</span> self.Imcs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    R = <span class="built_in">float</span>(self.sheet[<span class="string">&#x27;c&#x27;</span> + <span class="built_in">str</span>(line)].value) / <span class="number">1024</span></span><br><span class="line">            <span class="keyword">if</span> R &lt; <span class="number">0.25</span>:</span><br><span class="line">                C = math.ceil(<span class="built_in">float</span>(qNinfo + <span class="number">24</span>) / <span class="number">3816</span>)</span><br><span class="line">                TBS = <span class="number">8</span> * C * math.ceil((qNinfo + <span class="number">24</span>) / (<span class="number">8</span> * C)) - <span class="number">24</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                C = math.ceil(<span class="built_in">float</span>(qNinfo + <span class="number">24</span>) / <span class="number">8424</span>)</span><br><span class="line">                <span class="keyword">if</span> qNinfo &gt; <span class="number">8424</span>:</span><br><span class="line">                    TBS = <span class="number">8</span> * C * math.ceil((qNinfo + <span class="number">24</span>) / (<span class="number">8</span> * C)) - <span class="number">24</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    TBS = <span class="number">8</span> * math.ceil((qNinfo + <span class="number">24</span>) / (<span class="number">8</span> * C)) - <span class="number">24</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;TBS = %d bits&#x27;</span> % TBS)</span><br><span class="line">            <span class="keyword">return</span> TBS</span><br><span class="line">        <span class="keyword">except</span> TypeError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_TBS运行失败，重新设置scs与bw的值，以获取可用PRB数量值&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">N_bits</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算在给定参数下，一个RB所含的比特数、一个OFDM符号所含比特数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path, xQAM, scs, bw</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :param file_path: PRB表的路径（该表可由scs和bw查PRB值）</span></span><br><span class="line"><span class="string">        :param xQAM: 调制方式，16QAM, 64QAM and 256QAM</span></span><br><span class="line"><span class="string">        :param scs: sub carrier spacing，子载波间隔（kHz）</span></span><br><span class="line"><span class="string">        :param bw: bandwidth，载波带宽（MHz）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.table = load_workbook(file_path)</span><br><span class="line">        self.sheet = self.table[<span class="string">&#x27;Sheet1&#x27;</span>]</span><br><span class="line">        self.xQAM = xQAM</span><br><span class="line">        self.scs = scs</span><br><span class="line">        self.bw = bw</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_RPB_bits</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 一个RB所含的比特数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        N_prb_bits = math.log(self.xQAM, <span class="number">2</span>) * <span class="number">12</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;选用%dQAM调制，一个RB所含比特数=%d bits&quot;</span> % (self.xQAM, N_prb_bits))</span><br><span class="line">        <span class="keyword">return</span> N_prb_bits</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">calculate_N_symb_bits</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :return: 一个OFDM符号所含的比特数</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">6</span>):</span><br><span class="line">                <span class="keyword">if</span> self.scs == <span class="built_in">int</span>(self.sheet[<span class="string">&#x27;A&#x27;</span> + <span class="built_in">str</span>(line)].value):</span><br><span class="line">                    <span class="keyword">for</span> column <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">66</span>, <span class="number">78</span>):</span><br><span class="line">                        <span class="keyword">if</span> self.bw == <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="string">&#x27;1&#x27;</span>].value):</span><br><span class="line">                            N_prb = <span class="built_in">int</span>(self.sheet[<span class="built_in">chr</span>(column) + <span class="built_in">str</span>(line)].value)</span><br><span class="line">            N_symb_bits = N_prb * math.log(self.xQAM, <span class="number">2</span>) * <span class="number">12</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;scs=%dkHZ，bw=%dMHz，选用%dQAM调制，一个OFDM符号所含比特数=%d bits&quot;</span> % (self.scs, self.bw, self.xQAM, N_symb_bits))</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;calculate_N_symb_bits运行失败，scs=%dkHz,bw=%dMHz无对应PRB值&quot;</span> % (self.scs, self.bw))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建N_PRB对象,参数scs=30，bw=100</span></span><br><span class="line">    n = N_PRB(<span class="string">&#x27;maximum_transmission_bandwidth_configuration_Nrb.xlsx&#x27;</span>, <span class="number">15</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="comment"># 查询PRB数量</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/---------------------------------------------------------------\\&quot;</span>)</span><br><span class="line">    Nprb = n.calculate_N_prb()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\---------------------------------------------------------------/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建TBS对象</span></span><br><span class="line">    TBS1 = TBS(Nprb, <span class="string">&#x27;MCS index table 2 for PDSCH.xlsx&#x27;</span>, <span class="number">26</span>)</span><br><span class="line">    <span class="comment"># TBS1.calculate_N_re()</span></span><br><span class="line">    <span class="comment"># TBS1.calculate_N_info()</span></span><br><span class="line">    <span class="comment"># TBS1.calculate_q_N_info()</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/---------------------------------------------------------------\\&quot;</span>)</span><br><span class="line">    TBS1.calculate_TBS()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\---------------------------------------------------------------/&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建N_bits对象</span></span><br><span class="line">    xQAM_RB = N_bits(<span class="string">&#x27;maximum_transmission_bandwidth_configuration_Nrb.xlsx&#x27;</span>, <span class="number">64</span>, <span class="number">30</span>, <span class="number">20</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;/---------------------------------------------------------------\\&quot;</span>)</span><br><span class="line">    xQAM_RB.calculate_N_RPB_bits()</span><br><span class="line">    xQAM_RB.calculate_N_symb_bits()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\\---------------------------------------------------------------/&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/tags/Python/"/>
    
    <category term="5G" scheme="http://zhongriqian.github.io/tags/5G/"/>
    
    <category term="TBS" scheme="http://zhongriqian.github.io/tags/TBS/"/>
    
  </entry>
  
  <entry>
    <title>Python+Docker实现人脸识别远程监控系统</title>
    <link href="http://zhongriqian.github.io/2022/05/07/Python+Docker%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    <id>http://zhongriqian.github.io/2022/05/07/Python+Docker%E5%AE%9E%E7%8E%B0%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2023-01-28T14:54:46.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>本项目包括服务端程序和客户端程序。服务端使用Python OpenCV库实现人脸识别功能，并将添加上识别结果的视频流通过TCP发送给客户端，且支持将上述功能程序封装为Docker容器；客户端程序通过IP+端口接入服务端，接收视频流，实时查看人脸识别结果。客户端可与服务端断开接入后重新连接，不影响服务端功能。</p><h1 id="项目文件"><a href="#项目文件" class="headerlink" title="项目文件"></a>项目文件</h1><blockquote><ul><li>tcpsend.py（服务端程序）</li><li>tcpreceive.py（客户端程序）</li><li>requirements.txt（项目依赖）</li><li>train.py（人脸识别模型训练程序）</li><li>trainer.yml（人脸识别模型）</li><li>haarcascade_frontalface_alt2.xml（分类器）</li><li>Dockerfile（构建Docker镜像所需文件）</li></ul></blockquote><h1 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h1><h2 id="tcpsend-py"><a href="#tcpsend-py" class="headerlink" title="tcpsend.py"></a>tcpsend.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> npip</span><br><span class="line"><span class="comment">###</span></span><br><span class="line">address = (<span class="string">&#x27;ip&#x27;</span>, <span class="number">5555</span>)  <span class="comment"># 服务端地址和端口</span></span><br><span class="line">ser = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">ser.bind(address)</span><br><span class="line">ser.listen(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 阻塞式</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;waiting。。。&#x27;</span>)</span><br><span class="line">conn, addr = ser.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;建立连接...&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;连接对象：&#x27;</span>, addr)</span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># cap = cv2.VideoCapture(0)</span></span><br><span class="line">frames_num=cap.get(<span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;视频总帧数：&#x27;</span>,frames_num)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;发送目标...&#x27;</span>)</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#加载训练数据集文件</span></span><br><span class="line">recogizer = cv2.face.LBPHFaceRecognizer_create()</span><br><span class="line">recogizer.read(<span class="string">&#x27;./trainer.yml&#x27;</span>)</span><br><span class="line">names = []</span><br><span class="line">warningtime = <span class="number">0</span></span><br><span class="line"><span class="comment">#准备识别的图片</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">face_detect_demo</span>(<span class="params">img</span>):</span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  <span class="comment"># 转换为灰度</span></span><br><span class="line">    face_detector = cv2.CascadeClassifier(<span class="string">&#x27;./haarcascade_frontalface_alt2.xml&#x27;</span>)</span><br><span class="line">    face = face_detector.detectMultiScale(gray, <span class="number">1.1</span>, <span class="number">5</span>, cv2.CASCADE_SCALE_IMAGE, (<span class="number">100</span>, <span class="number">100</span>), (<span class="number">300</span>, <span class="number">300</span>))</span><br><span class="line">    <span class="comment"># face=face_detector.detectMultiScale(gray)</span></span><br><span class="line">    <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> face:</span><br><span class="line">        cv2.rectangle(img, (x, y), (x+w, y+h), color=(<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), thickness=<span class="number">2</span>)  <span class="comment"># blue,green,red</span></span><br><span class="line">        <span class="comment"># cv2.circle(img,center=(x+w//2,y+h//2),radius=w//2,color=(0,255,0),thickness=1)</span></span><br><span class="line">        <span class="comment"># 人脸识别</span></span><br><span class="line">        ids, confidence = recogizer.predict(gray[y:y + h, x:x + w])</span><br><span class="line">        <span class="comment"># print(&#x27;标签id:&#x27;,ids,&#x27;置信评分：&#x27;, confidence)</span></span><br><span class="line">        <span class="keyword">if</span> confidence &gt; <span class="number">80</span>:</span><br><span class="line">            cv2.putText(img, <span class="string">&#x27;unkonw&#x27;</span>, (x + <span class="number">10</span>, y - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, (<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cv2.putText(img, <span class="string">&#x27;dong&#x27;</span>, (x + <span class="number">10</span>, y - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.75</span>, (<span class="number">255</span>, <span class="number">144</span>, <span class="number">30</span>), <span class="number">2</span>)</span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;result&#x27;, img)</span></span><br><span class="line">    <span class="comment"># print(&#x27;bug:&#x27;,ids)</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name</span>():</span><br><span class="line">    path = <span class="string">&#x27;./dataset/&#x27;</span></span><br><span class="line">    <span class="comment">#  names = []</span></span><br><span class="line">    imagePaths = [os.path.join(path, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]</span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:</span><br><span class="line">       name = <span class="built_in">str</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>, <span class="number">2</span>)[<span class="number">1</span>])</span><br><span class="line">       names.append(name)</span><br><span class="line"><span class="comment">###</span></span><br><span class="line"><span class="comment">#name()</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    flag, frame = cap.read()</span><br><span class="line">    frame = face_detect_demo(frame)</span><br><span class="line">    <span class="comment"># frame = cv2.resize(frame, (1280, 720))</span></span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;send&#x27;, frame)</span></span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 数据打包有很多方式，也可以用json打包</span></span><br><span class="line">    img_encode = cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, frame)[<span class="number">1</span>]</span><br><span class="line">    data_encode = np.array(img_encode)</span><br><span class="line">    str_encode = data_encode.tostring()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn.sendall(str_encode)</span><br><span class="line">    <span class="keyword">except</span> :</span><br><span class="line">        conn, addr = ser.accept()</span><br></pre></td></tr></table></figure><h2 id="tcpreceive-py"><a href="#tcpreceive-py" class="headerlink" title="tcpreceive.py"></a>tcpreceive.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">address = (<span class="string">&#x27;ip&#x27;</span>, <span class="number">5555</span>)  <span class="comment"># 服务端地址和端口</span></span><br><span class="line">cli = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    cli.connect(address)  <span class="comment"># 尝试连接服务端</span></span><br><span class="line"><span class="keyword">except</span> Exception:ip</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;[!] Server not found or not open&#x27;</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line">frame_count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    time1 = time.time() <span class="keyword">if</span> frame_count == <span class="number">1</span> <span class="keyword">else</span> time1</span><br><span class="line">    trigger = <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">    cli.sendall(trigger.encode())</span><br><span class="line">    data = cli.recv(<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">20</span>)</span><br><span class="line">    image = np.frombuffer(data, np.uint8)</span><br><span class="line">    image = cv2.imdecode(image, cv2.IMREAD_COLOR)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;video&#x27;</span>, image)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    cv2.waitKey(<span class="number">1</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    time2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(image.shape[:<span class="number">2</span>], <span class="built_in">int</span>(frame_count / (time2 - time1)))</span><br><span class="line">    frame_count += <span class="number">1</span></span><br><span class="line">cli.close()</span><br></pre></td></tr></table></figure><h2 id="train-py"><a href="#train-py" class="headerlink" title="train.py"></a>train.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getImageAndLabels</span>(<span class="params">path</span>):</span><br><span class="line">    facesSamples = []  <span class="comment"># 储存人脸数据</span></span><br><span class="line">    ids = []  <span class="comment"># 尺寸姓名数据</span></span><br><span class="line">    imagePaths = [os.path.join(path, f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path)]  <span class="comment"># 储存图片信息</span></span><br><span class="line">    face_detector = cv.CascadeClassifier(<span class="string">&#x27;D:/Python/python3.9.8/Lib/site-packages/cv2/data/haarcascade_frontalface_alt2.xml&#x27;</span>)  <span class="comment"># 加载分类器</span></span><br><span class="line">    <span class="keyword">for</span> imagePath <span class="keyword">in</span> imagePaths:  <span class="comment"># 遍历列表中的图片</span></span><br><span class="line">        PIL_img = Image.<span class="built_in">open</span>(imagePath).convert(<span class="string">&#x27;L&#x27;</span>)  <span class="comment"># 打开图片，灰度化(PIL有九种模式：1,L,P,RGB,RGBA,CMYK,YCbCr,YCbCr,I,F)</span></span><br><span class="line">        img_numpy = np.array(PIL_img, <span class="string">&#x27;uint8&#x27;</span>)  <span class="comment"># 将图片转换为数组，以黑白深浅</span></span><br><span class="line">        faces = face_detector.detectMultiScale(img_numpy)  <span class="comment"># 获取图片人脸特征</span></span><br><span class="line">        <span class="built_in">id</span> = <span class="built_in">int</span>(os.path.split(imagePath)[<span class="number">1</span>].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])  <span class="comment"># 获取每张图片的id和姓名</span></span><br><span class="line">        <span class="keyword">for</span> x, y, w, h <span class="keyword">in</span> faces:</span><br><span class="line">            ids.append(<span class="built_in">id</span>)</span><br><span class="line">            facesSamples.append(img_numpy[y:y+h, x:x+w])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;id:&#x27;</span>, <span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;fs:&#x27;</span>, facesSamples)</span><br><span class="line">    <span class="keyword">return</span> facesSamples, ids</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    path = <span class="string">&#x27;./dataset/&#x27;</span>  <span class="comment"># 图片路径</span></span><br><span class="line">    faces, ids = getImageAndLabels(path)  <span class="comment"># 获取图像数组和id标签数据和姓名</span></span><br><span class="line">    recognizer = cv.face.LBPHFaceRecognizer_create()  <span class="comment"># 加载识别器</span></span><br><span class="line">    recognizer.train(faces, np.array(ids))  <span class="comment"># 训练</span></span><br><span class="line">    recognizer.write(<span class="string">&#x27;./trainer/trainer.yml&#x27;</span>)  <span class="comment"># 保存文件</span></span><br></pre></td></tr></table></figure><h2 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">numpy==1.21.5</span><br><span class="line">Pillow==9.1.0</span><br><span class="line">opencv-contrib-python==4.5.5.64</span><br><span class="line">opencv-python==4.5.5.64</span><br></pre></td></tr></table></figure><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> ./facerecognitionserver /code</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /code</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y libgl1-mesa-glx</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y libglib2.0-dev</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>,<span class="string">&quot;/code/tcpsend.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;本项目包括服务端程序和客户端程序。服务端使用Python OpenCV库实现人脸识别功能，并将添加上识别结果的视频流通过TCP发送给客户端，</summary>
      
    
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/tags/Python/"/>
    
    <category term="Docker" scheme="http://zhongriqian.github.io/tags/Docker/"/>
    
    <category term="OpenCV" scheme="http://zhongriqian.github.io/tags/OpenCV/"/>
    
    <category term="Socket" scheme="http://zhongriqian.github.io/tags/Socket/"/>
    
  </entry>
  
  <entry>
    <title>Python爬取王蛇属蛇类科普网站数据</title>
    <link href="http://zhongriqian.github.io/2022/03/21/Python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%9B%87%E5%B1%9E%E8%9B%87%E7%B1%BB%E7%A7%91%E6%99%AE%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/"/>
    <id>http://zhongriqian.github.io/2022/03/21/Python%E7%88%AC%E5%8F%96%E7%8E%8B%E8%9B%87%E5%B1%9E%E8%9B%87%E7%B1%BB%E7%A7%91%E6%99%AE%E7%BD%91%E7%AB%99%E6%95%B0%E6%8D%AE/</id>
    <published>2022-03-20T16:00:00.000Z</published>
    <updated>2023-01-28T08:53:46.685Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mkdir</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建文件夹</span></span><br><span class="line"><span class="string">    :param path: 文件夹路径</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    folder = os.path.exists(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> folder:</span><br><span class="line">        os.makedirs(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">data_save</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    下载图片并保存图片对应信息</span></span><br><span class="line"><span class="string">    :param data:从网页爬取的元组格式数据</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    photo_url_all = <span class="string">&quot;https://sites.pitt.edu/~mcs2/herp/&quot;</span> + data[<span class="number">3</span>]</span><br><span class="line">    <span class="comment"># print(photo_url_all)</span></span><br><span class="line">    <span class="comment"># 获取图片页面内容</span></span><br><span class="line">    resp_photo_page = requests.get(photo_url_all)</span><br><span class="line">    photo_page_content = resp_photo_page.text</span><br><span class="line">    photo_page_content_html = etree.HTML(photo_page_content)</span><br><span class="line">    <span class="comment"># xpath获取图片页面内每张图片的下载地址</span></span><br><span class="line">    src = photo_page_content_html.xpath(<span class="string">&#x27;/html/body/p/img/@src&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取要存放每组图片的文件夹名称，并创建对应名称的文件夹</span></span><br><span class="line">    folder_name = (data[<span class="number">3</span>].split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]).split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    mkdir(<span class="string">&quot;data/&quot;</span> + folder_name)</span><br><span class="line">    <span class="keyword">for</span> itt <span class="keyword">in</span> src:</span><br><span class="line">        <span class="comment"># 逐张保存</span></span><br><span class="line">        src = <span class="string">&quot;https://sites.pitt.edu/~mcs2/herp/&quot;</span> + itt</span><br><span class="line">        src_resp = requests.get(src)</span><br><span class="line">        photo_name = src.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/&quot;</span> + folder_name + <span class="string">&#x27;/&#x27;</span> + photo_name, mode=<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(src_resp.content)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 创建每组图片的信息文本，并写入信息</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;data/&quot;</span> + folder_name + <span class="string">&#x27;/&#x27;</span> + folder_name + <span class="string">&#x27;.txt&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">        ff.write(<span class="string">&quot;Scientific Name : %s\n&quot;</span> % data[<span class="number">0</span>])</span><br><span class="line">        ff.write(<span class="string">&quot;Common Name : %s\n&quot;</span> % data[<span class="number">1</span>])</span><br><span class="line">        ff.write(<span class="string">&quot;Adult Length : %s\n&quot;</span> % data[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://sites.pitt.edu/~mcs2/herp/Lampropeltis.html&quot;</span></span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    page_content = resp.text</span><br><span class="line">    obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;/td&gt;.*?&lt;tr&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td nowrap valign = top&gt;(?P&lt;Scientific_Name&gt;.*?)&lt;/td&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td valign = top&gt;(?P&lt;Common_Name&gt;.*?)&lt;/td&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td nowrap align = right valign = top&gt;(?P&lt;Adult_Length&gt;.*?)&lt;/td&gt;&#x27;</span></span><br><span class="line">                     <span class="string">r&#x27;.*?&lt;td valign = top&gt;&lt;IMG SRC=&quot;.*?ball.gif&quot;&gt;\s?&lt;A\s+HREF=&quot;(?P&lt;Photo&gt;.*?)&quot;&gt;Photo&lt;/A&gt;&#x27;</span>, re.S</span><br><span class="line">                     )</span><br><span class="line">    <span class="comment"># 返回迭代器</span></span><br><span class="line">    <span class="comment"># result = obj.finditer(page_content)</span></span><br><span class="line">    <span class="comment"># for it in result:</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Scientific_Name&quot;))</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Common_Name&quot;))</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Adult_Length&quot;))</span></span><br><span class="line">    <span class="comment">#     print(it.group(&quot;Photo&quot;))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回列表</span></span><br><span class="line">    result = obj.findall(page_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 多线程</span></span><br><span class="line">    <span class="comment"># with ThreadPoolExecutor(30) as t:</span></span><br><span class="line">    <span class="comment">#     for n in tqdm(result, &#x27;数据获取中&#x27;):</span></span><br><span class="line">    <span class="comment">#         t.submit(data_save, n)</span></span><br><span class="line">    <span class="comment"># print(&quot;数据获取完成&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单个依次获取</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> tqdm(result, <span class="string">&#x27;数据获取中&#x27;</span>):</span><br><span class="line">        data_save(n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据获取完成&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="http://zhongriqian.github.io/tags/Python/"/>
    
    <category term="爬虫" scheme="http://zhongriqian.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
</feed>
